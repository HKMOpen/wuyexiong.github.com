<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wuyexiong de Blog]]></title>
  <link href="http://wuyexiong.github.io/atom.xml" rel="self"/>
  <link href="http://wuyexiong.github.io/"/>
  <updated>2014-08-05T23:05:12+08:00</updated>
  <id>http://wuyexiong.github.io/</id>
  <author>
    <name><![CDATA[Wuyexiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android程序员必备精品资源]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/08/05/android-dev-boutique-resources/"/>
    <updated>2014-08-05T21:32:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/08/05/android-dev-boutique-resources</id>
    <content type="html"><![CDATA[<p>平时写程序中不断收集到的一些比较常用的东西,分享给大家.</p>

<h2 id="section">实用工具集锦</h2>

<ul>
  <li>Android Lifecycle <a href="https://github.com/xxv/android-lifecycle">https://github.com/xxv/android-lifecycle</a></li>
  <li>TinyPNG <a href="https://tinypng.com/">https://tinypng.com/</a></li>
  <li>Android Layout Finder <a href="https://www.buzzingandroid.com/tools/android-layout-finder/">Android Layout Finder</a></li>
  <li>Android Asset Studio <a href="http://romannurik.github.io/AndroidAssetStudio/">http://romannurik.github.io/AndroidAssetStudio/</a></li>
  <li>JSON Validator <a href="http://jsonlint.com/">http://jsonlint.com/</a></li>
  <li>JSON Viewer <a href="http://jsonviewer.stack.hu/">http://jsonviewer.stack.hu/</a></li>
  <li>Be JSON <a href="http://bejson.com/">http://bejson.com/</a></li>
  <li>JSON to POJO Creator <a href="http://www.jsonschema2pojo.org/">http://www.jsonschema2pojo.org/</a></li>
  <li>Android Button Maker <a href="http://angrytools.com/android/button/">http://angrytools.com/android/button/</a></li>
  <li>Android DPI Calculator <a href="http://jennift.com/dpical.html">http://jennift.com/dpical.html</a></li>
  <li>Gradle, Please <a href="http://gradleplease.appspot.com/">http://gradleplease.appspot.com/</a></li>
  <li>SQLite Database viewer</li>
  <li>SQLite Database browser <a href="http://sqlitebrowser.org/">http://sqlitebrowser.org/</a></li>
  <li>SQLite Expert <a href="http://www.sqliteexpert.com/">http://www.sqliteexpert.com/</a></li>
  <li>Navicat for SQLite <a href="http://www.navicat.com/products/navicat-for-sqlite">http://www.navicat.com/products/navicat-for-sqlite</a></li>
  <li>android-resource-remover <a href="https://github.com/KeepSafe/android-resource-remover">https://github.com/KeepSafe/android-resource-remover</a></li>
  <li>PID Cat <a href="https://github.com/JakeWharton/pidcat">https://github.com/JakeWharton/pidcat</a></li>
  <li>adb-wrapper.sh <a href="https://gist.github.com/wuyexiong/2e73975f6a98dccbca93">Github</a></li>
  <li>adb+.sh <a href="https://gist.github.com/wuyexiong/08358c1e52a645a14e67">Github</a></li>
</ul>

<h2 id="chrome-">Chrome 插件</h2>

<ul>
  <li>Android SDK Reference Search Extension <a href="https://chrome.google.com/webstore/detail/android-sdk-search/hgcbffeicehlpmgmnhnkjbjoldkfhoin">Visit website</a></li>
  <li>Android Resource Navigator Extension  <a href="http://jgilfelt.github.io/android-resource-navigator/">Visit website</a></li>
  <li>ChromeADB <a href="https://chrome.google.com/webstore/detail/chromeadb/fhdoijgfljahinnpbolfdimpcfoicmnm">Visit website</a></li>
  <li>POST MAN <a href="http://www.getpostman.com/">http://www.getpostman.com/</a></li>
  <li>DHC SERVICE <a href="https://www.sprintapi.com/dhcs.html">https://www.sprintapi.com/dhcs.html</a></li>
</ul>

<h2 id="ide-">IDE 插件</h2>

<ul>
  <li>android-parcelable-intellij-plugin <a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">Visit website</a></li>
  <li>Android Holo Colors IntelliJ Plugin <a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin">Visit website</a></li>
  <li>SelectorChapek for Android <a href="https://github.com/inmite/android-selector-chapek">Visit website</a></li>
  <li>Android Action Bar Style Generator <a href="https://github.com/jgilfelt/android-actionbarstylegenerator">Visit website</a></li>
  <li>ButterKnifeZelezny <a href="https://github.com/inmite/android-butterknife-zelezny">Visit website</a></li>
  <li>RoboCoP <a href="https://github.com/mediarain/RoboCoP">Visit website</a></li>
  <li>Dagger IntelliJ Plugin <a href="https://github.com/square/dagger-intellij-plugin">Visit website</a></li>
  <li>ADB Idea <a href="https://github.com/pbreault/adb-idea">Visit website</a></li>
</ul>

<h2 id="android-apps">Android Apps</h2>

<ul>
  <li>Catlog <a href="https://github.com/nolanlawson/Catlog">https://github.com/nolanlawson/Catlog</a></li>
  <li>DevDrawer <a href="https://github.com/tunitowen/DevDrawer">https://github.com/tunitowen/DevDrawer</a></li>
  <li>DevAppsDirect Android开源库集合 <a href="https://play.google.com/store/apps/details?id=com.inappsquared.devappsdirect">Google play</a></li>
  <li>Libraries for developers 同上 <a href="https://play.google.com/store/apps/details?id=com.desarrollodroide.repos">Google play</a></li>
  <li>Github  看看大神们每天都在干嘛,关注一下开源库的动态 <a href="https://play.google.com/store/apps/details?id=com.github.mobile&amp;hl=en">Google play</a></li>
  <li>StartupNews 各种文章汇集点 <a href="https://play.google.com/store/apps/details?id=com.halzhang.android.apps.startupnews">Google play</a></li>
  <li>Pocket Casts 苹果Podcasts的Android版 <a href="http://faq.shiftyjelly.com">http://faq.shiftyjelly.com</a></li>
  <li>Pocket 稍后阅读 <a href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro">Google play</a></li>
  <li>Press Rss订阅 <a href="https://play.google.com/store/apps/details?id=com.twentyfivesquares.press">Google play</a></li>
  <li>CloudMagic 用过的最好用的邮件客户端没有之一 <a href="https://play.google.com/store/apps/details?id=com.cloudmagic.mail">Google play</a></li>
  <li>Muzei 最棒的Android壁纸App没有之一 <a href="https://play.google.com/store/apps/details?id=net.nurik.roman.muzei">Google play</a> <a href="https://github.com/romannurik/muzei">Github</a></li>
  <li>最美应用 高品质应用发现社区 <a href="http://zuimeia.com/">http://zuimeia.com/</a></li>
  <li>网易云音乐 有些时间是属于耳朵的 <a href="http://music.163.com/#/download">Visit website</a></li>
  <li>多看阅读 精品阅读时光 <a href="http://www.duokan.com/product">visit website</a></li>
</ul>

<h2 id="section-1">技术集锦</h2>

<ul>
  <li>Android Weekly <a href="http://androidweekly.net">http://androidweekly.net</a></li>
  <li>Android开源项目分类汇总 <a href="https://github.com/Trinea/android-open-project">https://github.com/Trinea/android-open-project</a></li>
  <li>Android OpenSource <a href="http://android-arsenal.com/">http://android-arsenal.com/</a></li>
  <li>Android 相关的… <a href="http://www.appance.com/category/android/">http://www.appance.com/category/android/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best resources for Android development]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/05/14/best-resources-for-android-development/"/>
    <updated>2014-05-14T20:22:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/05/14/best-resources-for-android-development</id>
    <content type="html"><![CDATA[<p>From: <a href="http://www.androidauthority.com/best-resources-android-development-372414/">http://www.androidauthority.com/best-resources-android-development-372414/</a></p>

<p><img src="http://cdn04.androidauthority.net/wp-content/uploads/2014/05/android-developer-development-710x470.jpg" alt="android developer development" /></p>

<p><a href="https://www.flickr.com/photos/alper/9311087323/in/photolist-5L3aL7-7tMf8K-b4eRR-fbMKSk-67jXuH-8khnRM-8FDxBW-5U8MeL-5PkuHo-qkm17-cdyrGQ-dB7P9-azfVn9-qF4kP-9DDr6M-ifdAm5-59yWNu-4m84mh-91Zwx9-7eFrjw-8aAVst-8aEbsj-efQ9DN-4m41TD-dstqWC-7gg12S-8aAV1i-xcE8k-Q39Rk-ggBEsp-4m84rY-bqUfmk-iFvtS-CGWNK-axV3Y4-aXnWdi-CGWYa-CGX7U-CGX4t-41m2A-CGWUF-5LrzQZ-CGWHc-CGWCy-66Nbn4-sNcQb-8w6duo-87Kfxa-gYeprU-ghX2B7/">Alper Çuğun</a></p>

<p>Whether you’re a seasoned professional or just beginning with Android development, this list of resources (including tools, libraries, and blogs) is useful for any developer or team on just about any project, big or small. </p>

<h2 id="okhttp">OkHttp</h2>

<p><a href="http://square.github.io/okhttp/"><img src="http://cdn04.androidauthority.net/wp-content/uploads/2014/05/GitHub-Square-Ok-710x274.jpg" alt="GitHub Square Ok" /></a></p>

<p>OkHttp, a product of <a href="http://corner.squareup.com/">Square</a>, is an open-source HTTP and SPDY library for Android and Java. Android comes with two existing HTTP frameworks (<a href="http://developer.android.com/reference/java/net/HttpURLConnection.html">HttpURLConnection</a> and <a href="http://developer.android.com/reference/org/apache/http/client/HttpClient.html">HttpClient</a>) but over various Android OS versions have been rife with bugs that can make any normally-sane developer go nuts trying to nail down an HTTP problem. Fortunately, OkHttp solves many of the problems. OkHttp is built upon HttpUrlConnection — so the API should be familiar — but stays up-to-date with fixes from the Android codebase, meaning no compatibility nightmares with older OS versions. Oh, and if you’re looking for something that implements the Apache HttpClient API, that exists as a module: <em>okhttp-apache</em>. </p>

<p>Check out <a href="http://square.github.io/okhttp/">OkHttp</a>
<!-- more --></p>

<h2 id="retrofit">Retrofit</h2>

<p><a href="http://square.github.io/retrofit/"><img src="http://cdn01.androidauthority.net/wp-content/uploads/2014/05/Retrofit.jpg" alt="Retrofit" /></a></p>

<p>Retrofit, also a product of Square, is an open-source, type-safe REST client for Android and Java. The Android platform doesn’t lend itself much to simple client-server interaction when it comes to APIs. Retrofit aims to provide that, at least for <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> requests. Retrofit supports quite a bit of customization, but out of the box will use GSON for JSON-parsing and saves a ton of time building form and multipart requests by simplifying it all into a straightforward interface. Bonus: Retrofit will use OkHttp if it’s available. </p>

<p>Check out <a href="http://square.github.io/retrofit/">Retrofit</a></p>

<h2 id="picasso">Picasso</h2>

<p><a href="http://square.github.io/picasso/"><img src="http://cdn02.androidauthority.net/wp-content/uploads/2014/05/Picasso.jpg" alt="Picasso" /></a></p>

<p>Alright, this is the last Square open-source project I’ll list here, I promise (but there are plenty more you should <a href="http://square.github.io/">check out</a>). Picasso is an image downloading and caching library sporting a <a href="http://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a> for ease of use. Picasso has many options for customizing how it handles the downloaded image (including things like resizing and cropping, as well as providing an interface allowing you to transform the image how you see fit, such as <a href="https://gist.github.com/Aracem/8913410/13f7abea0c43bb8647aaf3cb0d0c090471b85a69">performing a circle crop</a> on it). Picasso will download the image (if not cached) and load it into the given target, which can be anything implementing the <a href="https://github.com/square/picasso/blob/master/picasso/src/main/java/com/squareup/picasso/Target.java">Target interface</a> or in its simplest and most common usage, an ImageView. </p>

<p>Check out <a href="http://square.github.io/picasso/">Picasso</a></p>

<h2 id="androidviews">AndroidViews</h2>

<p><a href="http://www.androidviews.net/"><img src="http://cdn01.androidauthority.net/wp-content/uploads/2014/05/Android-Views-710x236.jpg" alt="Android Views" /></a></p>

<p>AndroidViews.net is a site that aims to bring together many of the different tools, libraries, and resources into a browsable index. Unfortunately, there’s no search functionality and the site definitely isn’t comprehensive, so you’ll probably also want to check out the next resource on my list… </p>

<p>Check out <a href="http://www.androidviews.net/">AndroidViews</a></p>

<h2 id="android-weekly">Android Weekly</h2>

<p><a href="http://androidweekly.net/"><img src="http://cdn01.androidauthority.net/wp-content/uploads/2014/05/Android-Weekly-710x341.jpg" alt="Android Weekly" /></a></p>

<p>If there’s any mailing list you should ever want to be on, this is probably the first. Android Weekly is a newsletter of various musings in the Android development community, including new libraries, tools, blog posts, and more. If you don’t have email (is that a possibility?) or you just don’t like the prospect of giving them your email address, you can always check the site every Monday for the latest issue. </p>

<p>Check out <a href="http://androidweekly.net/">Android Weekly</a></p>

<h2 id="android-niceties">Android Niceties</h2>

<p><a href="http://androidniceties.tumblr.com/"><img src="http://cdn02.androidauthority.net/wp-content/uploads/2014/05/android-niceties-710x197.jpg" alt="android niceties" /></a></p>

<p>Android Niceties is a great collections of well-designed and thoughtfully-developed experiences in the Android ecosystem. Android Niceties has covered great, from major brand apps like <a href="https://play.google.com/store/apps/details?id=com.duolingo">Duolingo</a>, <a href="https://play.google.com/store/apps/details?id=com.expedia.bookings">Expedia</a>, and <a href="https://play.google.com/store/apps/details?id=com.etsy.android">Etsy</a> to perhaps previously lesser-known apps like <a href="https://play.google.com/store/apps/details?id=net.nurik.roman.muzei">Muzei</a>, <a href="https://play.google.com/store/apps/details?id=ch.bitspin.timely">Timely</a>, and <a href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro">Pocket</a>. </p>

<p>Check out <a href="http://androidniceties.tumblr.com/">Android Niceties</a></p>

<h2 id="android-lifecycle">Android Lifecycle</h2>

<p><a href="https://github.com/xxv/android-lifecycle"><img src="http://cdn04.androidauthority.net/wp-content/uploads/2014/05/Github-Android-Lifecycle-710x287.jpg" alt="Github-Android-Lifecycle" /></a></p>

<p>Touting itself as the “Complete Android Fragment &amp; Activity Lifecycle” (I haven’t completely verified this, but it looks right…), this graph outlines the flow of Activity and Fragment in relation to user interaction within and outside of your application. </p>

<p>Check out <a href="https://github.com/xxv/android-lifecycle">Android Lifecycle</a></p>

<h2 id="android-asset-studio">Android Asset Studio</h2>

<p><img src="http://cdn04.androidauthority.net/wp-content/uploads/2014/05/Android-Asset-Studio-710x337.jpg" alt="Android Asset Studio" /></p>

<p>This site has a myriad of tools built into it to simplify the creation of various Android-related resources including launcher icons, notification icons, navigation drawer icons, and more… </p>

<p>Check out <a href="http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html">Android Asset Studio</a></p>

<h2 id="android-holo-colors-generator">Android Holo Colors Generator</h2>

<p><a href="http://android-holo-colors.com/"><img src="http://cdn02.androidauthority.net/wp-content/uploads/2014/05/Android-Holo-Colors-Generator-710x401.jpg" alt="Android Holo Colors Generator" /></a></p>

<p>Built upon the Android Asset Studio, this tool simplifies the previously design-resource encumbering process of creating custom Holo-style Android widgets. Just plug in a color, specify your action bar theme, and get going! </p>

<p>Check out <a href="http://android-holo-colors.com/">Android Holo Colors Generator</a></p>

<h2 id="dpi-calculator-for-android">DPI Calculator for Android</h2>

<p><a href="http://jennift.com/dpical.html"><img src="http://cdn01.androidauthority.net/wp-content/uploads/2014/05/DPI-Calculator-for-Android--710x314.jpg" alt="DPI Calculator for Android" /></a></p>

<p>It is what it says it is. This tool is simple and elegant, allowing the user to plug in a number at any density (yeah, even tvdpi) and will calculate the value for any other density. This one’s a keeper for sure. </p>

<p>Check out <a href="http://jennift.com/dpical.html">DPI Calculator for Android</a></p>

<h2 id="android-developers-youtube-channel">Android Developers YouTube Channel</h2>

<p><a href="https://www.youtube.com/user/androiddevelopers"><img src="http://cdn03.androidauthority.net/wp-content/uploads/2014/05/Android-Developers-YouTube-710x334.jpg" alt="Android Developers YouTube" /></a></p>

<p>This one might seem a bit more obvious, but maybe you’re not subscribed to it. If you aren’t, you should be. Google is shifting its focus for Android (and the rest of its company, I hear) to be more design-oriented. This is and almost certainly will continue to be where you can find out much more about Android development, design, and UX — old and new. I also recommend the <a href="https://www.youtube.com/user/GoogleDevelopers">Google Developers channel</a> if you’re into that kind of thing. </p>

<p>Check out the <a href="https://www.youtube.com/user/androiddevelopers">Android Developers YouTube Channel</a></p>

<h2 id="gradle-please">Gradle, please</h2>

<p><a href="http://gradleplease.appspot.com/"><img src="http://cdn03.androidauthority.net/wp-content/uploads/2014/05/Gradle-Please-710x442.jpg" alt="Gradle Please" /></a></p>

<p>Thinking about switching to Gradle and need some help with your dependencies? Have been on Gradle but just want to simplify the dependency search? Look no further than <em>Gradle, please</em>. Plug in the name of your favorite library (heck, I dunno, maybe OkHttp, Picasso, or Retrofit?) and <em>Gradle, please</em> will spit out your dependencies “compile” line ready to go. If you’re looking for something a little more complex, you can always check out <a href="http://search.maven.org/">The Central Repository</a>. <em>Gradle, please</em> also happens to provide all of the standard Google-provided dependencies at the top of the page for your convenience. </p>

<p>Check out <a href="http://gradleplease.appspot.com/">Gradle, please</a></p>

<p>… and last but certainly, not least: </p>

<h2 id="androidplatform-frameworks-base">android/platform frameworks base</h2>

<p><a href="https://github.com/android/platform_frameworks_base"><img src="http://cdn03.androidauthority.net/wp-content/uploads/2014/05/GitHub-Android-Platform-710x256.jpg" alt="GitHub-Android-Platform" /></a></p>

<p>You might be wondering why I’m listing this. Well, I can’t tell you how many times I’ve been through this codebase. I don’t generally sift through on my local machine; rather, <a href="http://dallasgutauckis.com/2012/04/25/looking-at-android-source-quickly/">I peruse the Android source on Github’s website</a>. Typically, I’ll be wondering how something works (like the complexities of <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/ListView.java">ListView</a>/<a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/AdapterView.java">AdapterView</a>, or the new hotness that is <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/transition/TransitionManager.java">TransitionManager</a>) and want to check it out — this is the best place to really dig in. Oh, and in case you’re still feeling adventurous, there’s also the <a href="https://github.com/android/platform_frameworks_support">support library source</a> to browse. </p>

<p>Check out <a href="https://github.com/android/platform_frameworks_base">android/platform frameworks base</a></p>

<p>Happy developing, everyone. Please, share your favorite resources in the comments! </p>

<p><a href="http://www.androidauthority.com/tag/android-design/">Android design</a><a href="http://www.androidauthority.com/tag/android-developers/">Android Developers</a><a href="http://www.androidauthority.com/tag/android-development/">Android Development</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Context,What Context?]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/03/24/android-context/"/>
    <updated>2014-03-24T11:01:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/03/24/android-context</id>
    <content type="html"><![CDATA[<p>From: <a href="http://www.doubleencore.com/2013/06/context/">http://www.doubleencore.com/2013/06/context/</a></p>

<h4 id="context-is-probably-the-most-used-element-in-android-applicationsit-may-also-be-the-most-misused">Context is probably the most used element in Android applications…it may also be the most misused.</h4>

<p>　　<em>Context</em> objects are so common, and get passed around so frequently, it can be easy to create a situation you didn’t intend.  Loading resources, launching a new Activity, obtaining a system service, getting internal file paths, and creating views all require a <em>Context</em> (and that’s not even getting started on the full list!) to accomplish the task.  What I’d like to do is provide for you some insights on how <em>Context</em> works alongside some tips that will (hopefully) allow you to leverage it more effectively in your applications. </p>

<h2 id="context-types">Context Types</h2>

<p>　　Not all <em>Context</em> instances are created equal.  Depending on the Android application component, the <em>Context</em> you have access to varies slightly: </p>

<h3 id="application"><strong>Application</strong></h3>
<p>　　is a singleton instance running in your application process.  It can be accessed via methods like <em>getApplication()</em> from an Activity or Service, and <em>getApplicationContext()</em> from any other object that inherits from <em>Context</em>.  Regardless of where or how it is accessed, you will always receive the same instance from within your process. </p>

<h3 id="activityservice"><strong>Activity/Service</strong></h3>
<p>　　inherit from <em>ContextWrapper</em> which implements the same API, but proxies all of its method calls to a hidden internal <em>Context</em> instance, also known as its base context.  Whenever the framework creates a new Activity or Service instance, it also creates a new <em>ContextImpl</em> instance to do all of the heavy lifting that either component will wrap.  Each Activity or Service, and their corresponding base context, are unique per-instance. </p>

<h3 id="broadcastreceiver"><strong>BroadcastReceiver</strong></h3>
<p>　　is not a <em>Context</em> in and of itself, but the framework passes a <em>Context</em> to it in <em>onReceive()</em> each time a new broadcast event comes in.  This instance is a <em>ReceiverRestrictedContext</em> with two main functions disabled; calling <em>registerReceiver()</em> and <em>bindService()</em>.  These two functions are not allowed from within an existing <em>BroadcastReceiver.onReceive()</em>.  Each time a receiver processes a broadcast, the <em>Context</em> handed to it is a new instance. </p>

<h3 id="contentprovider"><strong>ContentProvider</strong></h3>
<p>　　is also not a <em>Context</em> but is given one when created that can be accessed via <em>getContext()</em>.  If the ContentProvider is running local to the caller (i.e. same application process), then this will actually return the same Application singleton.  However, if the two are in separate processes, this will be a newly created instance representing the package the provider is running in. </p>

<!-- more -->
<p>##Saved References </p>

<p>　　The first issue we need to address comes from saving a reference to a <em>Context</em> in an object or class that has a lifecycle that extends beyond that of the instance you saved.  For example, creating a custom singleton that requires a <em>Context</em> to load resources or access a ContentProvider, and saving a reference to the current Activity or Service in that singleton. </p>

<p><strong>Bad Singleton</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomManager</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">sInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="nf">CustomManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>　　The problem here is we don’t know where that <em>Context</em> came from, and it is not safe to hold a reference to the object if it ends up being an Activity or a Service.  This is a problem because a singleton is managed by a single static reference inside the enclosing class.  This means that our object, and ALL the other objects referenced by it, will never be garbage collected.  If this <em>Context</em> were an Activity, we would effectively hold hostage in memory all the views and other potentially large objects associated with it; creating a leak. </p>

<p>To protect against this, we modify the singleton to always reference the application context: </p>

<p><strong>Better Singleton</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomManager</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">sInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">//Always pass in the Application Context</span>
</span><span class="line">            <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomManager</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class="line">        <span class="kd">private</span> <span class="nf">CustomManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>　　Now it doesn’t matter where our <em>Context</em> came from, because the reference we are holding is safe.  The application context is itself a singleton, so we aren’t leaking anything by creating another static reference to it.  Another great example of places where this can crop up is saving references to a <em>Context</em> from inside a running background thread or a pending <em>Handler</em>. </p>

<p>　　So why can’t we <strong><em>always</em></strong> just reference the application context?  Take the middleman out of the equation, as it were, and never have to worry about creating leaks?  The answer, as I eluded to in the introduction, is because one <em>Context</em> is not equal to another. </p>

<h2 id="context-capabilities">Context Capabilities</h2>

<p>　　　The common actions you can safely take with a given <em>Context</em> object depends on where it came from originally.  Below is a table of the common places an application will receive a <em>Context</em>, and in each case what it is useful for: </p>

<table>
  <thead>
    <tr>
      <th>Capabilitiy</th>
      <th>Application</th>
      <th>Activity</th>
      <th>Service</th>
      <th>ContentProvider</th>
      <th>BroadcastReceiver</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Show a Dialog</td>
      <td>NO</td>
      <td>YES</td>
      <td>NO</td>
      <td>NO</td>
      <td>NO</td>
    </tr>
    <tr>
      <td>Start an Activity</td>
      <td>NO1</td>
      <td>YES</td>
      <td>NO1</td>
      <td>NO1</td>
      <td>NO1</td>
    </tr>
    <tr>
      <td>Layout Inflation</td>
      <td>NO2</td>
      <td>YES</td>
      <td>NO2</td>
      <td>NO2</td>
      <td>NO2</td>
    </tr>
    <tr>
      <td>Start a Service</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
    </tr>
    <tr>
      <td>Bind to a Service</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>NO</td>
    </tr>
    <tr>
      <td>Send a Broadcast</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
    </tr>
    <tr>
      <td>Register BroadcastReceiver</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>NO3</td>
    </tr>
    <tr>
      <td>Load Resource Values</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
      <td>YES</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>An application CAN start an Activity from here, but it requires that a new task be created.  This may fit specific use cases, but can create non-standard back stack behaviors in your application and is generally not recommended or considered good practice.</li>
  <li>This is legal, but inflation will be done with the default theme for the system on which you are running, not what’s defined in your application.</li>
  <li>Allowed if the receiver is <em>null</em>, which is used for obtaining the current value of a sticky broadcast, on Android 4.2 and above.</li>
</ol>

<h2 id="user-interface">User Interface</h2>

<p>　　You can see from looking at the previous table that there are a number of functions the application context is not properly suited to handle; all of them related to working with the UI.  In fact, the only implementation equipped to handle all tasks associated with the UI is Activity; the other instances fare pretty much the same in all categories. </p>

<p>　　Luckily, these three actions are things an application doesn’t really have any place doing outside the scope of an Activity; it’s almost like the framework was designed that way on purpose.  Attempting to show a <em>Dialog</em> that was created with a reference to the application context, or starting an Activity from the application context will throw an exception and crash your application…a strong indicator something has gone wrong. </p>

<p>　　The less obvious issue is inflating layouts.  If you read my last piece on <a href="http://www.doubleencore.com/2013/05/layout-inflation-as-intended/ (Layout Inflation as Intended)">layout inflation</a>, you already know that it can be a slightly mysterious process with some hidden behaviors;  using the right <em>Context</em> is linked to another one of those behaviors.  While the framework will not complain and will return a perfectly good view hierarchy from a <em>LayoutInflater</em> created with the application context, the themes and styles from your app will not be considered in the process.  This is because Activity is the only <em>Context</em> on which the themes defined in your manifest are actually attached.  Any other instance will use the system default theme to inflate your views, leading to a display output you probably didn’t expect. </p>

<h2 id="the-intersection-of-these-rules">The Intersection of these Rules</h2>

<p>　　Invariably, someone will arrive at the conclusion that these two rules conflict.  There is a case in the application’s current design where a long-term reference must be saved and we must save an Activity because the tasks we want to accomplish include manipulation of the UI.  If that is the case, I would urge you to reconsider your design, as this would be a textbook instance of <em>fighting the framework</em>. </p>

<h2 id="the-rule-of-thumb">The Rule of Thumb</h2>

<p>　　In most cases, use the <em>Context</em> directly available to you from the enclosing component you’re working within.  You can safely hold a reference to it as long as that reference does not extend beyond the lifecycle of that component. As soon as you need to save a reference to a <em>Context</em> from an object that lives beyond your Activity or Service, even temporarily, switch that reference you save over to the application context. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Java 编程风格指南]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/01/26/google-java-style-cn/"/>
    <updated>2014-01-26T15:19:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/01/26/google-java-style-cn</id>
    <content type="html"><![CDATA[<p>作者：Hawstein<br />
出处：<a href="http://hawstein.com/posts/google-java-style.html">http://hawstein.com/posts/google-java-style.html</a><br />
声明：本文采用以下协议进行授权： <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0</a> ，转载请注明作者及出处。  </p>

<h2 id="section">目录</h2>

<ol>
  <li><a href="##前言">前言</a></li>
  <li><a href="#源文件基础">源文件基础</a></li>
  <li><a href="##源文件结构">源文件结构</a></li>
  <li><a href="##格式">格式</a></li>
  <li><a href="##命名约定">命名约定</a></li>
  <li><a href="##编程实践">编程实践</a></li>
  <li><a href="##Javadoc">Javadoc</a></li>
  <li><a href="##后记">后记</a></li>
</ol>

<h2 id="section-1">前言</h2>

<p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。 </p>

<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。 </p>

<h3 id="section-2">1.1 术语说明</h3>

<p>在本文档中，除非另有说明： </p>

<ol>
  <li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>
  <li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</li>
</ol>

<p>其他的术语说明会偶尔在后面的文档出现。 </p>

<h3 id="section-3">1.2 指南说明</h3>

<p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。 
<!-- more --></p>

<h2 id="section-4">源文件基础</h2>

<h3 id="section-5">2.1 文件名</h3>

<p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。 </p>

<h3 id="utf-8">2.2 文件编码：UTF-8</h3>

<p>源文件编码格式为UTF-8。 </p>

<h3 id="section-6">2.3 特殊字符</h3>

<h4 id="section-7">2.3.1 空白字符</h4>

<p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着： </p>

<ol>
  <li>所有其它字符串中的空白字符都要进行转义。</li>
  <li>制表符不用于缩进。</li>
</ol>

<h4 id="section-8">2.3.2 特殊转义序列</h4>

<p>对于具有特殊<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97">转义序列</a>的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如<code>\012</code>)或Unicode(比如<code>\u000a</code>)转义。 </p>

<h4 id="ascii">2.3.3 非ASCII字符</h4>

<p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。 </p>

<blockquote>
  <p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。 </p>
</blockquote>

<p>例如： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">unitAbbrev</span> <span class="o">=</span> <span class="s">&quot;μs&quot;</span><span class="o">;</span>                                 <span class="o">|</span> <span class="err">赞，即使没有注释也非常清晰</span>
</span><span class="line"><span class="n">String</span> <span class="n">unitAbbrev</span> <span class="o">=</span> <span class="s">&quot;\u03bcs&quot;</span><span class="o">;</span> <span class="c1">// &quot;μs&quot;                    | 允许，但没有理由要这样做</span>
</span><span class="line"><span class="n">String</span> <span class="n">unitAbbrev</span> <span class="o">=</span> <span class="s">&quot;\u03bcs&quot;</span><span class="o">;</span> <span class="c1">// Greek letter mu, &quot;s&quot;    | 允许，但这样做显得笨拙还容易出错</span>
</span><span class="line"><span class="n">String</span> <span class="n">unitAbbrev</span> <span class="o">=</span> <span class="s">&quot;\u03bcs&quot;</span><span class="o">;</span>                            <span class="o">|</span> <span class="err">很糟，读者根本看不出这是什么</span>
</span><span class="line"><span class="k">return</span> <span class="sc">&#39;\ufeff&#39;</span> <span class="o">+</span> <span class="n">content</span><span class="o">;</span> <span class="c1">// byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话) </p>
</blockquote>

<h2 id="section-9">源文件结构</h2>

<p>一个源文件包含(按顺序地)： </p>

<ol>
  <li>许可证或版权信息(如有需要)</li>
  <li>package语句</li>
  <li>import语句</li>
  <li>一个顶级类(<strong>只有一个</strong>)</li>
</ol>

<p>以上每个部分之间用一个空行隔开。 </p>

<h3 id="section-10">3.1 许可证或版权信息</h3>

<p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。 </p>

<h3 id="package">3.2 package语句</h3>

<p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里) </p>

<h3 id="import">3.3 import语句</h3>

<h4 id="import-1">3.3.1 import不要使用通配符</h4>

<p>即，不要出现类似这样的import语句：<code>import java.util.*;</code></p>

<h4 id="section-11">3.3.2 不要换行</h4>

<p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行) </p>

<h4 id="section-12">3.3.3 顺序和间距</h4>

<p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔： </p>

<ol>
  <li>所有的静态导入独立成组</li>
  <li><code>com.google</code> imports(仅当这个源文件是在<code>com.google</code>包下)</li>
  <li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>
  <li><code>java</code> imports</li>
  <li><code>javax</code> imports</li>
</ol>

<p>组内不空行，按字典序排列。 </p>

<h3 id="section-13">3.4 类声明</h3>

<h4 id="section-14">3.4.1 只有一个顶级类声明</h4>

<p>每个顶级类都在一个与它同名的源文件中(当然，还包含<code>.java</code>后缀)。 </p>

<p>例外：<code>package-info.java</code>，该文件中可没有<code>package-info</code>类。 </p>

<h4 id="section-15">3.4.2 类成员顺序</h4>

<p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。 </p>

<h5 id="section-16">3.4.2.1 重载：永不分离</h5>

<p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。 </p>

<h2 id="section-17">格式</h2>

<p><strong>术语说明</strong>：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。 </p>

<h3 id="section-18">4.1 大括号</h3>

<h4 id="section-19">4.1.1 使用大括号(即使是可选的)</h4>

<p>大括号与<code>if, else, for, do, while</code>语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。 </p>

<h4 id="k--r-">4.1.2 非空块：K &amp; R 风格</h4>

<p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (<a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html">Egyptian brackets</a>): </p>

<ul>
  <li>左大括号前不换行</li>
  <li>左大括号后换行</li>
  <li>右大括号前换行</li>
  <li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>
</ul>

<p>示例： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">return</span> <span class="k">new</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="n">something</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ProblemException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">recover</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.8.1节给出了enum类的一些例外。 </p>

<h4 id="section-20">4.1.3 空块：可以用简洁版本</h4>

<p>一个空的块状结构里什么也不包含，大括号可以简洁地写成<code>{}</code>，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。 </p>

<p>示例： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">doNothing</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-21">4.2 块缩进：2个空格</h3>

<p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例) </p>

<h3 id="section-22">4.3 一行一个语句</h3>

<p>每个语句后要换行。 </p>

<h3 id="section-23">4.4 列限制：80或100</h3>

<p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。 </p>

<p>例外： </p>

<ol>
  <li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。</li>
  <li><code>package</code>和<code>import</code>语句(见3.2节和3.3节)。</li>
  <li>注释中那些可能被剪切并粘贴到shell中的命令行。</li>
</ol>

<h3 id="section-24">4.5 自动换行</h3>

<p><strong>术语说明</strong>：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。 </p>

<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。 </p>

<blockquote>
  <p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧) </p>
</blockquote>

<h4 id="section-25">4.5.1 从哪里断开</h4>

<p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。 </p>

<ol>
  <li>如果在<code>非赋值运算符</code>处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<code>&lt;T extends Foo &amp; Bar&gt;</code>)，catch块中的管道符号(<code>catch (FooException | BarException e</code>)</li>
  <li>如果在<code>赋值运算符</code>处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于<code>foreach</code>语句中的分号。</li>
  <li>方法名或构造函数名与左括号留在同一行。</li>
  <li>逗号(,)与其前面的内容留在同一行。</li>
</ol>

<h4 id="section-26">4.5.2 自动换行时缩进至少+4个空格</h4>

<p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。 </p>

<p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。 </p>

<p>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。 </p>

<h3 id="section-27">4.6 空白</h3>

<h4 id="section-28">4.6.1 垂直空白</h4>

<p>以下情况需要使用一个空行： </p>

<ol>
  <li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。
    * <strong>例外</strong>：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>
  <li>在函数体内，语句的逻辑分组间使用空行。</li>
  <li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>
  <li>要满足本文档中其他节的空行要求(比如3.3节：import语句)</li>
</ol>

<p>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。 </p>

<h4 id="section-29">4.6.2 水平空白</h4>

<p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方： </p>

<ol>
  <li>分隔任何保留字与紧随其后的左括号(<code>(</code>)(如<code>if, for catch</code>等)。</li>
  <li>分隔任何保留字与其前面的右大括号(<code>}</code>)(如<code>else, catch</code>)。</li>
  <li>在任何左大括号前(<code>{</code>)，两个例外：
    * <code>@SomeAnnotation({a, b})</code>(不使用空格)。
    * <code>String[][] x = foo;</code>(大括号间没有空格，见下面的Note)。</li>
  <li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：
    * 类型界限中的&amp;(<code>&lt;T extends Foo &amp; Bar&gt;</code>)。
    * catch块中的管道符号(<code>catch (FooException | BarException e</code>)。
    * <code>foreach</code>语句中的分号。</li>
  <li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>
  <li>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</li>
  <li>类型和变量之间：List list。</li>
  <li>数组初始化中，大括号内的空格是可选的，即<code>new int[] {5, 6}</code>和<code>new int[] { 5, 6 }</code>都是可以的。</li>
</ol>

<blockquote>
  <p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。 </p>
</blockquote>

<h4 id="section-30">4.6.3 水平对齐：不做要求</h4>

<p><strong>术语说明</strong>：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。 </p>

<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。 </p>

<p>以下示例先展示未对齐的代码，然后是对齐的代码： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span> <span class="c1">// this is fine</span>
</span><span class="line"><span class="kd">private</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span> <span class="c1">// this too</span>
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="kt">int</span>   <span class="n">x</span><span class="o">;</span>      <span class="c1">// permitted, but future edits</span>
</span><span class="line"><span class="kd">private</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>  <span class="c1">// may leave it unaligned</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。 </p>
</blockquote>

<h3 id="section-31">4.7 用小括号来限定组：推荐</h3>

<p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。 </p>

<h3 id="section-32">4.8 具体结构</h3>

<h4 id="section-33">4.8.1 枚举类</h4>

<p>枚举常量间用逗号隔开，换行可选。 </p>

<p>没有方法和文档的枚举类可写成数组初始化的格式： </p>

<pre><code>private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }
</code></pre>

<p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。 </p>

<h4 id="section-34">4.8.2 变量声明</h4>

<h5 id="section-35">4.8.2.1 每次只声明一个变量</h5>

<p>不要使用组合声明，比如<code>int a, b;</code>。 </p>

<h5 id="section-36">4.8.2.2 需要时才声明，并尽快进行初始化</h5>

<p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。 </p>

<h4 id="section-37">4.8.3 数组</h4>

<h5 id="section-38">4.8.3.1 数组初始化：可写成块状结构</h5>

<p>数组初始化可以写成块状结构，比如，下面的写法都是OK的： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>
</span><span class="line">    <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>
</span><span class="line">    <span class="mi">0</span><span class="o">,</span>
</span><span class="line">    <span class="mi">1</span><span class="o">,</span>
</span><span class="line">    <span class="mi">2</span><span class="o">,</span>
</span><span class="line">    <span class="mi">3</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>
</span><span class="line">    <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>
</span><span class="line">    <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span>
</span><span class="line"><span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="c">4.8.3.2 非C风格的数组声明</h5>

<p>中括号是类型的一部分：<code>String[] args</code>， 而非<code>String args[]</code>。 </p>

<h4 id="switch">4.8.4 switch语句</h4>

<p><strong>术语说明</strong>：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(<code>case FOO:</code>或<code>default:</code>)，后面跟着一条或多条语句。 </p>

<h5 id="section-39">4.8.4.1 缩进</h5>

<p>与其它块状结构一致，switch块中的内容缩进为2个空格。 </p>

<p>每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。 </p>

<h5 id="fall-through">4.8.4.2 Fall-through：注释</h5>

<p>在一个switch块内，每个语句组要么通过<code>break, continue, return</code>或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用<code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是<code>default</code>)中出现。示例： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class="line">    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class="line">        <span class="n">prepareOneOrTwo</span><span class="o">();</span>
</span><span class="line">        <span class="c1">// fall through</span>
</span><span class="line">    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class="line">        <span class="n">handleOneTwoOrThree</span><span class="o">();</span>
</span><span class="line">        <span class="k">break</span><span class="o">;</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>
</span><span class="line">        <span class="n">handleLargeNumber</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="default">4.8.4.3 default的情况要写出来</h5>

<p>每个switch语句都包含一个<code>default</code>语句组，即使它什么代码也不包含。 </p>

<h4 id="annotations">4.8.5 注解(Annotations)</h4>

<p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="nd">@Nullable</span>
</span><span class="line"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getNameIfPresent</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Partial</span> <span class="nd">@Mock</span> <span class="n">DataLoader</span> <span class="n">loader</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参数和局部变量注解没有特定规则。 </p>

<h4 id="section-40">4.8.6 注释</h4>

<h5 id="section-41">4.8.6.1 块注释风格</h5>

<p>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风格，也可以是<code>// ...</code>风格。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*</code>开始， 并且与前一行的<code>*</code>对齐。以下示例注释都是OK的。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * This is          // And so           /* Or you can</span>
</span><span class="line"><span class="cm"> * okay.            // is this.          * even do this. */</span>
</span><span class="line"><span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注释不要封闭在由星号或其它字符绘制的框架里。 </p>

<blockquote>
  <p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用<code>/* ... */</code>。 </p>
</blockquote>

<h4 id="modifiers">4.8.7 Modifiers</h4>

<p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">protected</span> <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">transient</span> <span class="kd">volatile</span> <span class="kd">synchronized</span> <span class="kd">native</span> <span class="kd">strictfp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-42">命名约定</h2>

<h3 id="section-43">5.1 对所有标识符都通用的规则</h3>

<p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式<code>\w+</code>。 </p>

<p>在Google其它编程语言风格中使用的特殊前缀或后缀，如<code>name_</code>, <code>mName</code>, <code>s_name</code>和<code>kName</code>，在Java编程风格中都不再使用。 </p>

<h3 id="section-44">5.2 标识符类型的规则</h3>

<h4 id="section-45">5.2.1 包名</h4>

<p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。 </p>

<h4 id="section-46">5.2.2 类名</h4>

<p>类名都以<code>UpperCamelCase</code>风格编写。 </p>

<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。 </p>

<p>测试类的命名以它要测试的类的名称开始，以<code>Test</code>结束。例如，<code>HashTest</code>或<code>HashIntegrationTest</code>。 </p>

<h4 id="section-47">5.2.3 方法名</h4>

<p>方法名都以<code>lowerCamelCase</code>风格编写。 </p>

<p>方法名通常是动词或动词短语。 </p>

<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如<code>testPop_emptyStack</code>。 并不存在唯一正确的方式来命名测试方法。 </p>

<h4 id="section-48">5.2.4 常量名</h4>

<p>常量名命名模式为<code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？ </p>

<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不<code>打算</code>改变对象一般是不够的，它要真的一直不变才能将它示为常量。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// Constants</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUMBER</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">NAMES</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Ed&quot;</span><span class="o">,</span> <span class="s">&quot;Ann&quot;</span><span class="o">);</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">Joiner</span> <span class="n">COMMA_JOINER</span> <span class="o">=</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">);</span>  <span class="c1">// because Joiner is immutable</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">SomeMutableType</span><span class="o">[]</span> <span class="n">EMPTY_ARRAY</span> <span class="o">=</span> <span class="o">{};</span>
</span><span class="line"><span class="kd">enum</span> <span class="n">SomeEnum</span> <span class="o">{</span> <span class="n">ENUM_CONSTANT</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Not constants</span>
</span><span class="line"><span class="kd">static</span> <span class="n">String</span> <span class="n">nonFinal</span> <span class="o">=</span> <span class="s">&quot;non-final&quot;</span><span class="o">;</span>
</span><span class="line"><span class="kd">final</span> <span class="n">String</span> <span class="n">nonStatic</span> <span class="o">=</span> <span class="s">&quot;non-static&quot;</span><span class="o">;</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutableCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableElements</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">mutable</span><span class="o">);</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MyClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">nonEmptyArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;these&quot;</span><span class="o">,</span> <span class="s">&quot;can&quot;</span><span class="o">,</span> <span class="s">&quot;change&quot;</span><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这些名字通常是名词或名词短语。 </p>

<h4 id="section-49">5.2.5 非常量字段名</h4>

<p>非常量字段名以<code>lowerCamelCase</code>风格编写。 </p>

<p>这些名字通常是名词或名词短语。 </p>

<h4 id="section-50">5.2.6 参数名</h4>

<p>参数名以<code>lowerCamelCase</code>风格编写。 </p>

<p>参数应该避免用单个字符命名。 </p>

<h4 id="section-51">5.2.7 局部变量名</h4>

<p>局部变量名以<code>lowerCamelCase</code>风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。 </p>

<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。 </p>

<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。 </p>

<h4 id="section-52">5.2.8 类型变量名</h4>

<p>类型变量可用以下两种风格之一进行命名： </p>

<ul>
  <li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>
  <li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>
</ul>

<h3 id="camelcase">5.3 驼峰式命名法(CamelCase)</h3>

<p><a href="http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">驼峰式命名法</a>分大驼峰式命名法(<code>UpperCamelCase</code>)和小驼峰式命名法(<code>lowerCamelCase</code>)。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。 </p>

<p>名字从<code>散文形式</code>(prose form)开始: </p>

<ol>
  <li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li>
  <li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。
    * 推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>
  <li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：
    * 每个单词的第一个字母都大写，来得到大驼峰式命名。
    * 除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>
  <li>最后将所有的单词连接起来得到一个标识符。</li>
</ol>

<p>示例： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Prose</span> <span class="n">form</span>                <span class="n">Correct</span>               <span class="n">Incorrect</span>
</span><span class="line"><span class="o">------------------------------------------------------------------</span>
</span><span class="line"><span class="s">&quot;XML HTTP request&quot;</span>        <span class="n">XmlHttpRequest</span>        <span class="n">XMLHTTPRequest</span>
</span><span class="line"><span class="s">&quot;new customer ID&quot;</span>         <span class="n">newCustomerId</span>         <span class="n">newCustomerID</span>
</span><span class="line"><span class="s">&quot;inner stopwatch&quot;</span>         <span class="n">innerStopwatch</span>        <span class="n">innerStopWatch</span>
</span><span class="line"><span class="s">&quot;supports IPv6 on iOS?&quot;</span>   <span class="n">supportsIpv6OnIos</span>     <span class="n">supportsIPv6OnIOS</span>
</span><span class="line"><span class="s">&quot;YouTube importer&quot;</span>        <span class="n">YouTubeImporter</span>
</span><span class="line">                          <span class="n">YoutubeImporter</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>加星号处表示可以，但不推荐。 </p>

<blockquote>
  <p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名<code>checkNonempty</code>和<code>checkNonEmpty</code>也都是正确的。 </p>
</blockquote>

<h2 id="section-53">编程实践</h2>

<h3 id="override">6.1 @Override：能用则用</h3>

<p>只要是合法的，就把<code>@Override</code>注解给用上。 </p>

<h3 id="section-54">6.2 捕获的异常：不能忽视</h3>

<p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个<code>AssertionError</code>重新抛出。) </p>

<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">handleNumericResponse</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">ok</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// it&#39;s not numeric; that&#39;s fine, just continue</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">return</span> <span class="nf">handleTextResponse</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>例外</strong>：在测试中，如果一个捕获的异常被命名为<code>expected</code>，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="n">emptyStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class="line">    <span class="n">fail</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchElementException</span> <span class="n">expected</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-55">6.3 静态成员：使用类进行调用</h3>

<p>使用类名调用静态的类成员，而不是具体某个对象或表达式。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Foo</span> <span class="n">aFoo</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class="line"><span class="n">Foo</span><span class="o">.</span><span class="na">aStaticMethod</span><span class="o">();</span> <span class="c1">// good</span>
</span><span class="line"><span class="n">aFoo</span><span class="o">.</span><span class="na">aStaticMethod</span><span class="o">();</span> <span class="c1">// bad</span>
</span><span class="line"><span class="n">somethingThatYieldsAFoo</span><span class="o">().</span><span class="na">aStaticMethod</span><span class="o">();</span> <span class="c1">// very bad</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="finalizers-">6.4 Finalizers: 禁用</h3>

<p>极少会去重载<code>Object.finalize</code>。 </p>

<blockquote>
  <p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解<a href="http://books.google.com/books?isbn=8131726592">Effective Java</a> 第7条款：“Avoid Finalizers”，然后不要使用它。 </p>
</blockquote>

<h2 id="javadoc">Javadoc</h2>

<h3 id="section-56">7.1 格式</h3>

<h4 id="section-57">7.1.1 一般形式</h4>

<p>Javadoc块的基本格式如下所示： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Multiple lines of Javadoc text are written here,</span>
</span><span class="line"><span class="cm"> * wrapped normally...</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">method</span><span class="o">(</span><span class="n">String</span> <span class="n">p1</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者是以下单行形式： </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** An especially short bit of Javadoc. */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。 </p>

<h4 id="section-58">7.1.2 段落</h4>

<p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。 </p>

<h4 id="javadoc-1">7.1.3 Javadoc标记</h4>

<p>标准的Javadoc标记按以下顺序出现：<code>@param</code>, <code>@return</code>, <code>@throws</code>, <code>@deprecated</code>, 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。 </p>

<h3 id="section-59">7.2 摘要片段</h3>

<p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。 </p>

<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This method returns...</code>开头, 它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。 </p>

<blockquote>
  <p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */</code>，这是不正确的。它应该写成<code>/** Returns the customer ID. */</code>。 </p>
</blockquote>

<h3 id="javadoc-2">7.3 哪里需要使用Javadoc</h3>

<p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外： </p>

<h4 id="section-60">7.3.1 例外：不言自明的方法</h4>

<p>对于简单明显的方法如<code>getFoo</code>，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。 </p>

<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。 </p>

<blockquote>
  <p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名<code>getCanonicalName</code>， 就不应该忽视文档说明，因为读者很可能不知道词语<code>canonical name</code>指的是什么。 </p>
</blockquote>

<h4 id="section-61">7.3.2 例外：重载</h4>

<p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。 </p>

<h4 id="javadoc-3">7.3.3 可选的Javadoc</h4>

<p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。 </p>

<h2 id="section-62">后记</h2>

<p>本文档翻译自<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">Google Java Style</a>， 作者<a href="http://weibo.com/hawstein">@Hawstein</a>。 </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[零基础开始学习Vim-学习Vim应该是快乐的~~]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/01/26/start-learn-vim-funny/"/>
    <updated>2014-01-26T00:58:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/01/26/start-learn-vim-funny</id>
    <content type="html"><![CDATA[<h2 id="section">案情回顾</h2>
<p>　　上一篇文章<a href="http://wuyexiong.github.io/blog/2014/01/01/start-to-learn-vim/">零基础开始学习Vim-新手入门</a>有介绍一些学习Vim的资源.<br />
　　对于从来没有用过Vim的同学,看到上一篇文章时候,有多少人马上开始动手了呢?<br />
　　刚刚开始接触Vim,一定是无从下手的,甚至会找不到动力去学习和练习!!!至少开始的时候卤煮是这样的.</p>

<h2 id="section-1">有趣的入门学习</h2>

<p>两个有趣的Vim入门小游戏</p>

<h3 id="vimadventures">VimAdventures</h3>
<p><img src="http://wuyexiong.github.io/images/20140126-learn-vim-funny/vim-adventures.png" alt="" /><br />
　　这个小游戏是特别有意思,可以在玩这个游戏的过程中熟悉Vim的热键<br />
　　记得最初是在左耳朵耗子的博客<a href="http://coolshell.cn/articles/7166.html">酷壳-CoolShell.cn</a>中看见的.  </p>

<h4 id="httpvim-adventurescom"><a href="http://vim-adventures.com/">想要玩游戏的同学点我</a></h4>

<h3 id="vimgenius">VimGenius</h3>
<p><img src="http://wuyexiong.github.io/images/20140126-learn-vim-funny/vim-vimgenius.png" alt="" /><br />
　　还有这个在线Vim闯关练习的网站交互做的也很有意思.可以比上面那个学到更多
<a href="http://vimgenius.com/">http://vimgenius.com/</a></p>

<h3 id="section-2">巩固练习</h3>
<p>　　上面两个小游戏都分别闯关之后…… To Be Continue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[零基础开始学习Vim-新手入门]]></title>
    <link href="http://wuyexiong.github.io/blog/2014/01/01/start-to-learn-vim/"/>
    <updated>2014-01-01T01:03:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2014/01/01/start-to-learn-vim</id>
    <content type="html"><![CDATA[<p>不折不扣的工具控,自从看到有同事飞码穿梭在Vim之间,就无缘无故的迷恋上了.<br />
别光看到别人的帅,别人帅是因为什么呢,好好想一下,如果我们也想这么帅,该怎么办呢…<br />
苦思冥想没用的,还是好好的从头学起吧,谁让你出生的时候没有被动技能(自动掌握Vim进行高效编码)呢….</p>

<h2 id="vimtutor">新手入门vimtutor</h2>

<p>Vim怎么入门呢???<br />
其实最容易的就是直接在命令行执行 <strong>vimtutor</strong> 即可进入帮助文档<br />
一进去,又全是英文,头都大了是不是…要做一个优秀的程序员,必须英文好对吧…… <br />
要被鄙视的节奏,谁都想看英文帮助文档,但是现在(2013140101),也没能力看懂.真的<br />
但总不能现在特别想学Vim,还得绕一大弯路去花上年把两年学好英语再开始学吧???  </p>

<p><img src="http://wuyexiong.github.io/images/20140101-start-to-learn-vim/vim-tutor-en.png" alt="" /></p>

<p>只能采用迂回战术了,一边编程一边学英语,嗯,真是太机智了.<br />
那我们在命令行输入 <strong>vimtutor zh</strong> 就进入中文的新手入门了,把这篇文章看完练习完生存模式就通关了 哈哈哈</p>

<p><img src="http://wuyexiong.github.io/images/20140101-start-to-learn-vim/vim-tutor-zh.png" alt="" /></p>

<p>那最好的入门方式就是一边看Vim的vimtutor一边进行操作吧,很快就通关啦.记得复习</p>

<h2 id="section">新手入门进阶</h2>

<p>上面的练习做完之后,可以考虑接下来的练习了<br />
<!-- more --> 
 直接链到左耳朵耗子的博客   </p>

<ul>
  <li><a href="http://coolshell.cn/articles/5426.html">http://coolshell.cn/articles/5426.html</a></li>
  <li>如果有一天访问不了,或者想离线看,这里有PDF的 <a href="http://pan.baidu.com/s/1kTuP9I3">百度网盘</a></li>
</ul>

<h2 id="section-1">快捷键附图</h2>

<p><img src="http://wuyexiong.github.io/images/20140101-start-to-learn-vim/vim-cheat-sheet-diagram.png" alt="" /></p>

<p><img src="http://wuyexiong.github.io/images/20140101-start-to-learn-vim/vim-cheat-sheet-full.png" alt="" /></p>

<h3 id="vimhttpblogvgodtw20091208vim-cheat-sheet-for-programmers">快捷键附图和基础快捷键详解原帖 <a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/">給程式設計師的Vim入門圖解說明</a></h3>

<h3 id="pdf-httppanbaiducoms1mglrucghttppanbaiducoms1mglrucg">PDF下载 <a href="http://pan.baidu.com/s/1mgLRUcg">http://pan.baidu.com/s/1mgLRUcg</a></h3>

<h2 id="section-2">整理了两篇新手入门的总结,可以用来复习</h2>

<ul>
  <li><a href="http://pan.baidu.com/s/1pJ4kQPt">Vim官方教程“精编版”.pdf</a></li>
  <li><a href="http://pan.baidu.com/s/1jGzBvWq">Vim学习笔记.pdf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重装系统后恢复Octopress]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/12/31/restore-the-octopress-after-reshipment-system/"/>
    <updated>2013-12-31T15:29:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/12/31/restore-the-octopress-after-reshipment-system</id>
    <content type="html"><![CDATA[<h1 id="restore-the-octopress-after-reshipment-system">restore-the-octopress-after-reshipment-system</h1>

<p>如何你想学习如何基于github搭建一个自己的Octopress博客,请参考以下两篇文章哈</p>

<ul>
  <li><a href="http://blog.163.com/fuhaocn@126/blog/static/366650802012115103842500/">http://blog.163.com/fuhaocn@126/blog/static/366650802012115103842500/</a></li>
  <li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></li>
</ul>

<p>Mac重装了很久,一直也没有恢复Octopross的博客系统.今天是2013年最后一天啦,顺手弄弄.</p>

<p>这一切基于你的Mac环境什么都妥妥的了.比如xcode,git,ruby…等等</p>

<h2 id="clone">0. 首先是把项目clone到本地,接着开始吧</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">○ git clone git@github.com:wuyexiong/wuyexiong.github.com.git
</span><span class="line">Cloning into 'wuyexiong.github.com'...
</span><span class="line">remote: Counting objects: 5004, done.
</span><span class="line">remote: Compressing objects: 100% (1758/1758), done.
</span><span class="line">remote: Total 5004 (delta 2798), reused 5002 (delta 2797)
</span><span class="line">Receiving objects: 100% (5004/5004), 1.47 MiB | 340.00 KiB/s, done.
</span><span class="line">Resolving deltas: 100% (2798/2798), done.
</span><span class="line">Checking connectivity... done</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="source">1. 切换到source分支下</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± git checkout source
</span><span class="line">Branch source set up to track remote branch source from origin.
</span><span class="line">Switched to a new branch 'source'</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± git branch -a
</span><span class="line">  master
</span><span class="line">* source
</span><span class="line">  remotes/origin/HEAD -&gt; origin/master
</span><span class="line">  remotes/origin/master
</span><span class="line">  remotes/origin/source</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<h2 id="blogrvmyes">2. 打开blog文件夹,接着就会弹出rvm相关信息，写yes</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± cd blog
</span><span class="line">You are using '.rvmrc', it requires trusting, it is slower and it is not compatible with other ruby managers,
</span><span class="line">you can switch to '.ruby-version' using 'rvm rvmrc to [.]ruby-version'
</span><span class="line">or ignore this warning with 'rvm rvmrc warning ignore /Users/wuyexiong/Blog/wuyexiong.github.com/.rvmrc',
</span><span class="line">'.rvmrc' will continue to be the default project file in RVM 1 and RVM 2,
</span><span class="line">to ignore the warning for all files run 'rvm rvmrc warning ignore all.rvmrcs'.
</span><span class="line">
</span><span class="line">********************************************************************************************************************
</span><span class="line">* NOTICE                                                                                                           *
</span><span class="line">********************************************************************************************************************
</span><span class="line">* RVM has encountered a new or modified .rvmrc file in the current directory, this is a shell script and           *
</span><span class="line">* therefore may contain any shell commands.                                                                        *
</span><span class="line">*                                                                                                                  *
</span><span class="line">* Examine the contents of this file carefully to be sure the contents are safe before trusting it!                 *
</span><span class="line">* Do you wish to trust '/Users/wuyexiong/Blog/wuyexiong.github.com/.rvmrc'?                                        *
</span><span class="line">* Choose v[iew] below to view the contents                                                                         *
</span><span class="line">********************************************************************************************************************
</span><span class="line">y[es], n[o], v[iew], c[ancel]&gt; y
</span><span class="line">Using /Users/wuyexiong/.rvm/gems/ruby-2.0.0-p247</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="octopress">3.接下来安装OctoPress相关环境</h2>

<h3 id="gem-install-bundler">gem install bundler</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± gem install bundler
</span><span class="line">Successfully installed bundler-1.5.1
</span><span class="line">Parsing documentation for bundler-1.5.1
</span><span class="line">1 gem installed</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###bundle install
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">± bundle install
</span><span class="line">Fetching gem metadata from http://rubygems.org/.......
</span><span class="line">Fetching additional metadata from http://rubygems.org/..
</span><span class="line">Installing rake (0.9.2.2)
</span><span class="line">Installing RedCloth (4.2.9)
</span><span class="line">Installing chunky_png (1.2.5)
</span><span class="line">Installing fast-stemmer (1.0.1)
</span><span class="line">***略
</span><span class="line">***略
</span><span class="line">Installing stringex (1.4.0)
</span><span class="line">Using bundler (1.5.1)
</span><span class="line">Your bundle is complete!
</span><span class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
###gem install jekyll
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">± gem install jekyll
</span><span class="line">Fetching: liquid-2.5.4.gem (100%)
</span><span class="line">Successfully installed liquid-2.5.4
</span><span class="line">Fetching: rb-fsevent-0.9.4.gem (100%)
</span><span class="line">Successfully installed rb-fsevent-0.9.4
</span><span class="line">Fetching: ffi-1.9.3.gem (100%)
</span><span class="line">Building native extensions.  This could take a while...
</span><span class="line">Successfully installed ffi-1.9.3
</span><span class="line">***略
</span><span class="line">***略
</span><span class="line">Installing ri documentation for parslet-1.5.0
</span><span class="line">Parsing documentation for toml-0.1.0
</span><span class="line">Installing ri documentation for toml-0.1.0
</span><span class="line">Parsing documentation for jekyll-1.4.2
</span><span class="line">Installing ri documentation for jekyll-1.4.2
</span><span class="line">17 gems installed</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<h2 id="rake">4.修复rake环境问题</h2>

<p>　　执行rake install的时候弹出错误提示</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± rake install
</span><span class="line">rake aborted!
</span><span class="line">You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.2.2. Prepending `bundle exec` to your command may solve this.
</span><span class="line">/Users/wuyexiong/.rvm/gems/ruby-2.0.0-p247/gems/bundler-1.5.1/lib/bundler/runtime.rb:34:in `block in setup'
</span><span class="line">/Users/wuyexiong/.rvm/gems/ruby-2.0.0-p247/gems/bundler-1.5.1/lib/bundler/runtime.rb:19:in `setup'
</span><span class="line">/Users/wuyexiong/.rvm/gems/ruby-2.0.0-p247/gems/bundler-1.5.1/lib/bundler.rb:119:in `setup'
</span><span class="line">/Users/wuyexiong/.rvm/gems/ruby-2.0.0-p247/gems/bundler-1.5.1/lib/bundler/setup.rb:7:in `&lt;top (required)&gt;'
</span><span class="line">/Users/wuyexiong/Blog/wuyexiong.github.com/Rakefile:2:in `&lt;top (required)&gt;'
</span><span class="line">(See full trace by running task with --trace)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>###这时候打开Octopress根目录下的Gemfile修改为如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :development do
</span><span class="line">  gem 'rake', '~&gt; 10.1.0'  //修改这一行
</span><span class="line">  gem 'jekyll', '~&gt; 0.12'
</span><span class="line">  gem 'rdiscount', '~&gt; 1.6.8'
</span><span class="line">  gem 'pygments.rb', '~&gt; 0.3.4'
</span><span class="line">  gem 'RedCloth', '~&gt; 4.2.9'
</span><span class="line">  gem 'haml', '~&gt; 3.1.7'
</span><span class="line">  gem 'compass', '~&gt; 0.12.2'
</span><span class="line">  gem 'sass-globbing', '~&gt; 1.0.0'
</span><span class="line">  gem 'rubypants', '~&gt; 0.2.0'
</span><span class="line">  gem 'rb-fsevent', '~&gt; 0.9'
</span><span class="line">  gem 'stringex', '~&gt; 1.4.0'
</span><span class="line">  gem 'liquid', '~&gt; 2.3.0'
</span><span class="line">end
</span><span class="line">
</span><span class="line">gem 'sinatra', '~&gt; 1.4.2'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">5. 运行部署</h2>
<p>　　试试看rake preview,浏览器打开http://localhost:4000看看效果吧.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± rake preview
</span><span class="line">Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
</span><span class="line">[2013-12-31 15:54:08] INFO  WEBrick 1.3.1
</span><span class="line">[2013-12-31 15:54:08] INFO  ruby 2.0.0 (2013-06-27) [x86_64-darwin12.5.0]
</span><span class="line">[2013-12-31 15:54:08] INFO  WEBrick::HTTPServer#start: pid=15479 port=4000
</span><span class="line">Configuration from /Users/wuyexiong/Blog/wuyexiong.github.com/_config.yml
</span><span class="line">Auto-regenerating enabled: source -&gt; public
</span><span class="line">[2013-12-31 15:54:08] regeneration: 136 files changed
</span><span class="line">
</span><span class="line">Dear developers making use of FSSM in your projects,
</span><span class="line">FSSM is essentially dead at this point. Further development will
</span><span class="line">be taking place in the new shared guard/listen project. Please
</span><span class="line">let us know if you need help transitioning! ^_^b
</span><span class="line">- Travis Tilley
</span><span class="line">
</span><span class="line">&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">6.最后一定忘了什么…</h2>

<p>这篇文章写完了.<br />
  rake generate &amp;&amp; rake deploy之后…… <br />
  等了十几分钟,还没刷新出网页,总感觉哪里不对劲…
  执行以下命令发布Octopress到Github</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">± rake setup_github_pages
</span><span class="line">Enter the read/write url for your repository
</span><span class="line">(For example, 'git@github.com:your_username/your_username.github.io)
</span><span class="line">Repository url: git@github.com:wuyexiong/wuyexiong.github.com.git//这里写你的github上博客repository的ssh URL
</span><span class="line">rm -rf _deploy
</span><span class="line">mkdir _deploy
</span><span class="line">cd _deploy
</span><span class="line">Initialized empty Git repository in /Users/wuyexiong/Blog/wuyexiong.github.com/_deploy/.git/
</span><span class="line">[master (root-commit) ada2d3b] Octopress init
</span><span class="line"> 1 file changed, 1 insertion(+)
</span><span class="line"> create mode 100644 index.html
</span><span class="line">cd -
</span><span class="line">---
</span><span class="line">## Now you can deploy to http://wuyexiong.github.io with `rake deploy` ##</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这下好了,你们就可以看到这篇文章啦. 所以.方案肯定是本人验证过的…谢谢大家哈</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（五） 通道之间的数据传输]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/17/java-nio-channel-to-channel/"/>
    <updated>2013-06-17T01:58:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/17/java-nio-channel-to-channel</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/java-nio-channel-to-channel/">http://ifeve.com/java-nio-channel-to-channel/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html">http://tutorials.jenkov.com/java-nio/scatter-gather.html</a>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">作者:Jakob Jenkov   译者:郭蕾     校对:周泰</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在Java NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel（译者注：channel中文常译作通道）传输到另外一个channel。</p>

<h2 id="transferfrom">transferFrom()</h2>
<p>FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中（译者注：这个方法在JDK文档中的解释为将字节从给定的可读取字节通道传输到此通道的文件中）。下面是一个简单的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">RandomAccessFile</span> <span class="n">fromFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;fromFile.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">FileChannel</span>      <span class="n">fromChannel</span> <span class="o">=</span> <span class="n">fromFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="n">RandomAccessFile</span> <span class="n">toFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;toFile.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">FileChannel</span>      <span class="n">toChannel</span> <span class="o">=</span> <span class="n">toFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="kt">long</span> <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">fromChannel</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="n">toChannel</span><span class="o">.</span><span class="na">transferFrom</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">fromChannel</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>方法的输入参数position表示从position处开始向目标文件写入数据，count表示最多传输的字节数。
如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小于请求的字节数。</p>

<p>此外要注意，在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。
因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。</p>

<h2 id="transferto">transferTo()</h2>

<p>transferTo()方法将数据从FileChannel传输到其他的channel中。下面是一个简单的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">RandomAccessFile</span> <span class="n">fromFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;fromFile.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">FileChannel</span>      <span class="n">fromChannel</span> <span class="o">=</span> <span class="n">fromFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="n">RandomAccessFile</span> <span class="n">toFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;toFile.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">FileChannel</span>      <span class="n">toChannel</span> <span class="o">=</span> <span class="n">toFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="kt">long</span> <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">fromChannel</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="n">fromChannel</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">toChannel</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>是不是发现这个例子和前面那个例子特别相似？除了调用方法的FileChannel对象不一样外，其他的都一样。</p>

<p>上面所说的关于SocketChannel的问题在transferTo()方法中同样存在。SocketChannel会一直传输数据直到目标buffer被填满。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（四） Scatter/Gather]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/17/java-nio-scattergather/"/>
    <updated>2013-06-17T01:31:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/17/java-nio-scattergather</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/java-nio-scattergather/">http://ifeve.com/java-nio-scattergather/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html">http://tutorials.jenkov.com/java-nio/scatter-gather.html</a>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">作者：Jakob Jenkov   译者：郭蕾  </span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Java NIO开始支持scatter/gather，scatter/gather用于描述从Channel（译者注：Channel在中文经常翻译为通道）中读取或者写入到Channel的操作。</p>

<p>分散（scatter）从Channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据“分散（scatter）”到多个Buffer中。</p>

<p>聚集（gather）写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel 将多个Buffer中的数据“聚集（gather）”后发送到Channel。</p>

<h2 id="scattering-reads">Scattering Reads</h2>

<p>Scattering Reads是指数据从一个channel读取到多个buffer中。</p>

<p>如下图描述  <!-- more -->
<img src="http://wuyexiong.github.io/images/java-nio-imgs/java-nio-scatter.png" alt="Java NIO: Scattering Read" /></p>

<p>代码示例如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ByteBuffer</span> <span class="n">header</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">128</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">ByteBuffer</span> <span class="n">body</span>   <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">ByteBuffer</span><span class="o">[]</span> <span class="n">bufferArray</span> <span class="o">=</span> <span class="o">{</span> <span class="n">header</span><span class="o">,</span> <span class="n">body</span> <span class="o">};</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bufferArray</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。</p>

<p>Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如 128byte），Scattering Reads才能正常工作。</p>

<h2 id="gathering-writes">Gathering Writes</h2>

<p>Gathering Writes是指数据从多个buffer写入到同一个channel。<br />
如下图描述： <br />
<img src="http://wuyexiong.github.io/images/java-nio-imgs/java-nio-gather.png" alt="Java NIO: Gathering Write" /></p>

<p>代码示例如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ByteBuffer</span> <span class="n">header</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">128</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">ByteBuffer</span> <span class="n">body</span>   <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//write data into buffers</span>
</span><span class="line">
</span><span class="line"><span class="n">ByteBuffer</span><span class="o">[]</span> <span class="n">bufferArray</span> <span class="o">=</span> <span class="o">{</span> <span class="n">header</span><span class="o">,</span> <span class="n">body</span> <span class="o">};</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bufferArray</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>buffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。</p>

<p>因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（三） Buffer]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-buffer/"/>
    <updated>2013-06-10T23:31:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-buffer</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/buffers/">http://ifeve.com/buffers/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/buffers.html">http://tutorials.jenkov.com/java-nio/buffers.html</a>  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">作者：Jakob Jenkov     译者：airu     校对：丁一</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Java NIO中的Buffer用于和NIO通道进行交互。如你所知，数据是从通道读入缓冲区，从缓冲区写入到通道中的。</p>

<p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>

<p><strong>下面是NIO Buffer相关的话题列表：</strong></p>

<ol>
  <li>Buffer的基本用法</li>
  <li>Buffer的capacity,position和limit</li>
  <li>Buffer的类型 </li>
  <li>Buffer的分配 </li>
  <li>向Buffer中写数据</li>
  <li>flip()方法</li>
  <li>从Buffer中读取数据</li>
  <li>clear()与compact()方法</li>
  <li>mark()与reset()方法</li>
  <li>equals()与compareTo()方法</li>
</ol>

<!-- more -->

<h2 id="buffer">Buffer的基本用法</h2>

<p>使用Buffer读写数据一般遵循以下四个步骤：</p>

<ol>
  <li>写入数据到Buffer</li>
  <li>调用flip()方法</li>
  <li>从Buffer中读取数据</li>
  <li>调用clear()方法或者compact()方法</li>
</ol>

<p>当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式。在读模式下，可以读取之前写入到buffer的所有数据。</p>

<p>一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用clear()或compact()方法。clear()方法会清空整个缓冲区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p>

<p>下面是一个使用Buffer的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">RandomAccessFile</span> <span class="n">aFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;data/nio-data.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">FileChannel</span> <span class="n">inChannel</span> <span class="o">=</span> <span class="n">aFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">		
</span><span class="line"><span class="c1">//create buffer with capacity of 48 bytes</span>
</span><span class="line"><span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span><span class="c1">//read into buffer.</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span><span class="o">(</span><span class="n">bytesRead</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Read &quot;</span> <span class="o">+</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class="line">	<span class="n">buf</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>     <span class="c1">//make buffer ready for read</span>
</span><span class="line">	<span class="k">while</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">hasRemaining</span><span class="o">())</span>
</span><span class="line">	<span class="o">{</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>     <span class="c1">// read 1 byte at a time</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="n">buf</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>     <span class="c1">//make buffer ready for writing</span>
</span><span class="line">	<span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">aFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="buffercapacitypositionlimit">Buffer的capacity,position和limit</h2>
<p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>

<p>为了理解Buffer的工作原理，需要熟悉它的三个属性：</p>

<ul>
  <li>capacity</li>
  <li>position</li>
  <li>limit</li>
</ul>

<p>position和limit的含义取决于Buffer处在读模式还是写模式。不管Buffer处在什么模式，capacity的含义总是一样的。</p>

<p>这里有一个关于capacity，position和limit在读写模式中的说明，详细的解释在插图后面。</p>

<p><img src="http://wuyexiong.github.io/images/java-nio-imgs/buffers-modes.png" alt="" /></p>

<h2 id="capacity">capacity</h2>

<p>作为一个内存块，Buffer有一个固定的大小值，也叫“capacity”.你只能往里写capacity个byte、long，char等类型。一旦Buffer满了，需要将其清空（通过读数据或者清除数据）才能继续写数据往里写数据。</p>

<h2 id="position">position</h2>

<p>当你写数据到Buffer中时，position表示当前的位置。初始的position值为0.当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity - 1.</p>

<p>当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。</p>

<h2 id="limit">limit</h2>

<p>在写模式下，Buffer的limit表示你最多能往Buffer里写多少数据。 写模式下，limit等于Buffer的capacity。</p>

<p>当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）</p>

<h2 id="buffer-1">Buffer的类型</h2>

<p>Java NIO 有以下Buffer类型</p>

<ul>
  <li>ByteBuffer</li>
  <li>MappedByteBuffer</li>
  <li>CharBuffer</li>
  <li>DoubleBuffer</li>
  <li>FloatBuffer</li>
  <li>IntBuffer</li>
  <li>LongBuffer</li>
  <li>ShortBuffer</li>
</ul>

<p>如你所见，这些Buffer类型代表了不同的数据类型。换句话说，就是可以通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。</p>

<p>MappedByteBuffer 有些特别，在涉及它的专门章节中再讲。</p>

<h2 id="buffer-2">Buffer的分配</h2>

<p>要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。下面是一个分配48字节capacity的ByteBuffer的例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是分配一个可存储1024个字符的CharBuffer：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">CharBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">CharBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="buffer-3">向Buffer中写数据</h2>

<p>写数据到Buffer有两种方式:  </p>

<ul>
  <li>从Channel写到Buffer。</li>
  <li>通过Buffer的put()方法写到Buffer里。</li>
</ul>

<p>从Channel写到Buffer的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span> <span class="c1">//read into buffer.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过put方法写Buffer的例子:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">buf</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">127</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>put方法有很多版本，允许你以不同的方式把数据写入到Buffer中。例如， 写到一个指定的位置，或者把一个字节数组写入到Buffer。 更多Buffer实现的细节参考JavaDoc。</p>

<h2 id="flip">flip()方法</h2>

<p>flip方法将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。</p>

<p>换句话说，position现在用于标记读的位置，limit表示之前写进了多少个byte、char等 —— 现在能读取多少个byte、char等。</p>

<h2 id="buffer-4">从Buffer中读取数据</h2>

<p>从Buffer中读取数据有两种方式：</p>

<ul>
  <li>从Buffer读取数据到Channel。</li>
  <li>使用get()方法从Buffer中读取数据。</li>
</ul>

<p>从Buffer读取数据到Channel的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//read from buffer into channel.</span>
</span><span class="line"><span class="kt">int</span> <span class="n">bytesWritten</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用get()方法从Buffer中读取数据的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">byte</span> <span class="n">aByte</span> <span class="o">=</span> <span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>get方法有很多版本，允许你以不同的方式从Buffer中读取数据。例如，从指定position读取，或者从Buffer中读取数据到字节数组。更多Buffer实现的细节参考JavaDoc。</p>

<h2 id="rewind">rewind()方法</h2>

<p>Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。</p>

<h2 id="clearcompact">clear()与compact()方法</h2>

<p>一旦读完Buffer中的数据，需要让Buffer准备好再次被写入。可以通过clear()或compact()方法来完成。</p>

<p>如果调用的是clear()方法，position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。</p>

<p>如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。</p>

<p>如果Buffer中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据，那么使用compact()方法。</p>

<p>compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。</p>

<h2 id="markreset">mark()与reset()方法</h2>

<p>通过调用Buffer.mark()方法，可以标记Buffer中的一个特定position。之后可以通过调用Buffer.reset()方法恢复到这个position。例如:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">buffer</span><span class="o">.</span><span class="na">mark</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">//call buffer.get() a couple of times, e.g. during parsing.</span>
</span><span class="line">
</span><span class="line"><span class="n">buffer</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>  <span class="c1">//set position back to mark.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="equalscompareto">equals()与compareTo()方法</h2>

<p>可以使用equals()和compareTo()方法两个Buffer。</p>

<h3 id="equals">equals()</h3>

<p>当满足下列条件时，表示两个Buffer相等：</p>

<ol>
  <li>有相同的类型（byte、char、int等）。</li>
  <li>Buffer中剩余的byte、char等的个数相等。</li>
  <li>Buffer中所有剩余的byte、char等都相同。</li>
</ol>

<p>如你所见，equals只是比较Buffer的一部分，不是每一个在它里面的元素都比较。实际上，它只比较Buffer中的剩余元素。</p>

<h3 id="compareto">compareTo()方法</h3>

<p>compareTo()方法比较两个Buffer的剩余元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：</p>

<ol>
  <li>第一个不相等的元素小于另一个Buffer中对应的元素 。</li>
  <li>所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（二） Channel]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-channels/"/>
    <updated>2013-06-10T13:08:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-channels</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/channels/">http://ifeve.com/channels/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/channels.html">http://tutorials.jenkov.com/java-nio/channels.html</a>  </p>

<pre><code> 作者：Jakob Jenkov     译者：airu     校对：丁一
</code></pre>

<p>Java NIO的通道类似流，但又有些不同：</p>

<p>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。
通道可以异步地读写。
通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。
正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p>

<p><img src="http://wuyexiong.github.io/images/java-nio-imgs/overview-channels-buffers.png" alt="" /></p>

<!-- more -->

<p><strong>Channel的实现</strong></p>

<p>这些是Java NIO中最重要的通道的实现：</p>

<ul>
  <li>FileChannel</li>
  <li>DatagramChannel</li>
  <li>SocketChannel</li>
  <li>ServerSocketChannel</li>
</ul>

<p>FileChannel 从文件中读写数据。</p>

<p>DatagramChannel 能通过UDP读写网络中的数据。</p>

<p>SocketChannel 能通过TCP读写网络中的数据。</p>

<p>ServerSocketChannel可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</p>

<p><strong>基本的 Channel 示例</strong></p>

<p>下面是一个使用FileChannel读取数据到Buffer中的示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class="line">	<span class="o">{</span>
</span><span class="line">		<span class="n">RandomAccessFile</span> <span class="n">aFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="s">&quot;data/nio-data.txt&quot;</span><span class="o">,</span> <span class="s">&quot;rw&quot;</span><span class="o">);</span>
</span><span class="line">		<span class="n">FileChannel</span> <span class="n">inChannel</span> <span class="o">=</span> <span class="n">aFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">		<span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">		<span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class="line">		<span class="k">while</span><span class="o">(</span><span class="n">bytesRead</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Read &quot;</span> <span class="o">+</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class="line">			<span class="n">buf</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class="line">			<span class="k">while</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">hasRemaining</span><span class="o">())</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		
</span><span class="line">			<span class="n">buf</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">			<span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		<span class="n">aFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer,接着再从Buffer中读取数据。下一节会深入讲解Buffer的更多细节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（一） Java NIO 概述]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-overview/"/>
    <updated>2013-06-10T02:07:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-overview</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/overview/">http://ifeve.com/overview/</a><br />
英文原文链接:<a href="http://tutorials.jenkov.com/java-nio/overview.html">http://tutorials.jenkov.com/java-nio/overview.html</a></p>

<p>作者：<strong>Jakob Jenkov</strong>     译者：<strong>airu</strong>     校对：<strong>丁一</strong></p>

<p>Java NIO 由以下几个核心部分组成:</p>

<ul>
  <li>Channels</li>
  <li>Buffers</li>
  <li>Selectors</li>
</ul>

<p>虽然Java NIO中除此之外还有很多的类和组件，但在我看来，Channel，Buffer和Selector构成了核心的API。其他组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。因此，在概述中我将集中在这三个组件上。其他组件会在单独的章节中讲到</p>

<!-- more -->

<h2 id="channel--buffer">Channel 和 Buffer</h2>

<p>基本上，所有的 IO 在 NIO 中都从一个Channel 开始。Channel 有点象流。 数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。这里有个图示：<br />
<img src="http://wuyexiong.github.io/images/java-nio-imgs/java-nio-overview-channels-buffers1.png" alt="" /></p>

<p><strong>Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现：</strong></p>

<ul>
  <li>FileChannel</li>
  <li>DatagramChannel</li>
  <li>SocketChannel</li>
  <li>ServerSocketChannel</li>
</ul>

<p>正如你所看到的，这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO。  </p>

<p>与这些类一起的有一些有趣的接口，但为简单起见，我尽量在概述中不提到它们。  </p>

<p>本教程其它章节与它们相关的地方我会进行解释。</p>

<p><strong>以下是Java NIO里关键的Buffer实现：</strong></p>

<ul>
  <li>ByteBuffer</li>
  <li>CharBuffer</li>
  <li>DoubleBuffer</li>
  <li>FloatBuffer</li>
  <li>IntBuffer</li>
  <li>LongBuffer</li>
  <li>ShortBuffer</li>
</ul>

<p>这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。</p>

<p>Java NIO 还有个 Mappedyteuffer，用于表示内存映射文件， 我也不打算在概述中说明。</p>

<h2 id="selector">Selector</h2>

<p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。例如，在一个聊天服务器中。</p>

<p>这是在一个单线程中使用一个Selector处理3个Channel的图示：</p>

<p><img src="http://wuyexiong.github.io/images/java-nio-imgs/java-nio-overview-selectors.png" alt="" /></p>

<p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新连接进来，数据接收等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO 系列教程]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-allstart/"/>
    <updated>2013-06-10T01:53:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-allstart</id>
    <content type="html"><![CDATA[<p>本文章为转载，感谢并发编程网  </p>

<p>译文原文地址:<a href="http://ifeve.com/java-nio-all/">http://ifeve.com/java-nio-all/</a></p>

<p>英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/index.html">http://tutorials.jenkov.com/java-nio/index.html</a>  </p>

<p>作者：<strong>Jakob Jenkov</strong>   译者：<strong>郭蕾</strong>     校对：<strong>方腾飞</strong></p>

<p>Java NIO(New IO)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。</p>

<p><strong><em>Java NIO: Channels and Buffers（通道和缓冲区）</em></strong></p>

<p>标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。</p>

<p><strong><em>Java NIO: Asynchronous IO（异步IO）</em></strong></p>

<p>Java NIO可以让你异步的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。当数据被写入到缓冲区时，线程可以继续处理它。从缓冲区写入通道也类似。</p>

<p><strong><em>Java NIO: Selectors（选择器）</em></strong></p>

<p>Java NIO引入了选择器的概念，选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。</p>

<!-- more -->

<p>下面是Java NIO系列文章的目录：</p>

<ol>
  <li>Java NIO概述   (airu 已翻译)  </li>
  <li>Java NIO Channel (airu 已翻译)  </li>
  <li>Java NIO Buffer    (airu 已翻译)  </li>
  <li>Java NIO Scatter / Gather（已翻译）  </li>
  <li>Java NIO 通道之间的数据传输   （已翻译）  </li>
  <li>Java NIO Selector（浪迹v 已翻译）  </li>
  <li>Java NIO FileChannel（周泰 已翻译）  </li>
  <li>Java NIO SocketChannel （布丁  已翻译）  </li>
  <li>Java NIO ServerSocketChannel （布丁  已翻译）  </li>
  <li>Java NIO DataGramChannel （布丁  已翻译）  </li>
  <li>Java NIO Pipe （A黄忠 已翻译）  </li>
  <li>Java NIO 与IO（已翻译）  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Fragment 之间的通讯处理]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/04/30/android-fragment-communication/"/>
    <updated>2013-04-30T21:38:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/04/30/android-fragment-communication</id>
    <content type="html"><![CDATA[<h1 id="section">上集回顾</h1>
<p>上一次已经有结果了，有三种通讯方式<br />
文章连接:<a href="http://wuyexiong.github.io/blog/2013/04/30/android-fragment/">Click Me</a></p>

<p>1.使用接口,让Activity扮演管理角色,负责分发消息到该窗口的子View</p>

<p>2.使用LocalBroadcastManager + IntentFilter解决不同组件通讯,Intent负责搭载数据</p>

<p>3.EventBus </p>

<p>4.otto 这里不做介绍，下面有demo链接，基于注解的解偶通信组件</p>

<p>其实按照MVC的思想，Activity就真正的变成了Controler，<br />
Activity中不涉及任何的业务逻辑的代码，只负责分发消息到不同的子View(Fragment)。 <br />
如果希望整个应用只有一个Activity，就需要再抽象出一层Controller，负责处理Activity与其子Controller的通讯 </p>

<h2 id="section-1">相关下载</h2>

<ul>
  <li><a href="https://github.com/greenrobot/EventBus">EventBus项目托管</a></li>
  <li><a href="http://pan.baidu.com/share/link?shareid=440866&amp;uk=2030412954">EventBus-PPT</a></li>
  <li>[otto项目托管](<a href="https://github.com/square/otto">https://github.com/square/otto</a></li>
  <li><a href="http://www.subsis.dk/24/otto-for-android">otto-demo</a></li>
</ul>

<h2 id="section-2">项目</h2>

<p>我们直接看代码吧，因为表达能力还训练，加上有点懒 ^_^ 😄<br />
项目结构<br />
<img class="[eclipse-project]" src="http://wuyexiong.github.io/images/20130430-android-fragment-communication/eclipse-project.png" />
<!-- more -->
###首先是布局de代码
 - <code>/layout/article_view.xml</code> ** ArticleFragment.java ** 关联的布局</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;TextView</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class="line">    <span class="na">android:id=</span><span class="s">&quot;@+id/article&quot;</span>
</span><span class="line">    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">    <span class="na">android:padding=</span><span class="s">&quot;16dp&quot;</span>
</span><span class="line">    <span class="na">android:textSize=</span><span class="s">&quot;18sp&quot;</span> <span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/TextView&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>/layout/news_articles.xml</code> ** HeadlinesFragment.java ** 关联的布局</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;FrameLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class="line">    <span class="na">android:id=</span><span class="s">&quot;@+id/fragment_container&quot;</span>
</span><span class="line">    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/FrameLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>/layout-large/new_articles.xml</code> ** HeadlinesFragment.java ** 关联的布局，在平板大分辨率的时候回被自动启用  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class="line">    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">    <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span> <span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;fragment</span>
</span><span class="line">        <span class="na">android:id=</span><span class="s">&quot;@+id/headlines_fragment&quot;</span>
</span><span class="line">        <span class="na">android:name=</span><span class="s">&quot;tree.love.android.fragments.HeadlinesFragment&quot;</span>
</span><span class="line">        <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class="line">        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;fragment</span>
</span><span class="line">        <span class="na">android:id=</span><span class="s">&quot;@+id/article_fragment&quot;</span>
</span><span class="line">        <span class="na">android:name=</span><span class="s">&quot;tree.love.android.fragments.ArticleFragment&quot;</span>
</span><span class="line">        <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class="line">        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class="line">        <span class="na">android:layout_weight=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>MainActivity.java</code> 首页 -_- 其实就那么一页  哈哈哈  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">FragmentActivity</span>  <span class="kd">implements</span> <span class="n">HeadlinesFragment</span><span class="o">.</span><span class="na">OnHeadlineSelectedListener</span> <span class="o">{</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MainActivity&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="kd">private</span> <span class="n">LocalBroadcastManager</span> <span class="n">mBroadcastManager</span><span class="o">;</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">BroadcastReceiver</span> <span class="n">mItemViewListClickReceiver</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ACTION_ITEMVIEW_LISTCLICK</span> <span class="o">=</span> <span class="s">&quot;tree.love.android.fragments.itemview.listclick&quot;</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">news_articles</span><span class="o">);</span>
</span><span class="line">        <span class="c1">//如果是手机分辨率布局</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fragment_container</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        	<span class="c1">// 如果之前保存了状态,我们不需要做任何事情,否则会重复加载Fragment</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">savedInstanceState</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">// Create an instance of ExampleFragment</span>
</span><span class="line">            <span class="n">HeadlinesFragment</span> <span class="n">firstFragment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HeadlinesFragment</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//如果这个Activity被一个特殊的Intent传递,如果有需要,把该数据也传给Fragment</span>
</span><span class="line">            <span class="n">firstFragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 添加该Fragment到R.id.fragment_container这个容器布局中</span>
</span><span class="line">            <span class="n">getSupportFragmentManager</span><span class="o">().</span><span class="na">beginTransaction</span><span class="o">()</span>
</span><span class="line">                    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fragment_container</span><span class="o">,</span> <span class="n">firstFragment</span><span class="o">).</span><span class="na">commit</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">initBroadcastListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="n">mBroadcastManager</span> <span class="o">=</span> <span class="n">LocalBroadcastManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">        <span class="n">IntentFilter</span> <span class="n">intentFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntentFilter</span><span class="o">();</span>
</span><span class="line">        <span class="n">intentFilter</span><span class="o">.</span><span class="na">addAction</span><span class="o">(</span><span class="n">ACTION_ITEMVIEW_LISTCLICK</span><span class="o">);</span>
</span><span class="line">        <span class="n">mItemViewListClickReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BroadcastReceiver</span><span class="o">()</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">			<span class="nd">@Override</span>
</span><span class="line">			<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">				<span class="k">if</span><span class="o">(</span><span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">ACTION_ITEMVIEW_LISTCLICK</span><span class="o">))</span>
</span><span class="line">				<span class="o">{</span>
</span><span class="line">					<span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">ACTION_ITEMVIEW_LISTCLICK</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="s">&quot;position&quot;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">));</span>
</span><span class="line">				<span class="o">}</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="o">};</span>
</span><span class="line">        <span class="n">mBroadcastManager</span><span class="o">.</span><span class="na">registerReceiver</span><span class="o">(</span><span class="n">mItemViewListClickReceiver</span><span class="o">,</span> <span class="n">intentFilter</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* </span>
</span><span class="line"><span class="cm">     * 实现HeadlinesFragment.OnHeadlineSelectedListener中的ListView点击事件的回调接口</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onArticleSelected</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 获取当前Activity是否已经加载了ArticleFragment</span>
</span><span class="line">        <span class="n">ArticleFragment</span> <span class="n">articleFrag</span> <span class="o">=</span> <span class="o">(</span><span class="n">ArticleFragment</span><span class="o">)</span>
</span><span class="line">                <span class="n">getSupportFragmentManager</span><span class="o">().</span><span class="na">findFragmentById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">article_fragment</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">articleFrag</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        	<span class="c1">//如果进到这里,说明我们正在使用大屏幕布局/.</span>
</span><span class="line">        	<span class="c1">//直接更新ArticleFragment的布局</span>
</span><span class="line">            <span class="n">articleFrag</span><span class="o">.</span><span class="na">updateArticleView</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 我们正在使用小屏幕布局</span>
</span><span class="line">            <span class="c1">// 创建Fragment,并且传递参数</span>
</span><span class="line">            <span class="n">ArticleFragment</span> <span class="n">newFragment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArticleFragment</span><span class="o">();</span>
</span><span class="line">            <span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class="line">            <span class="n">args</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">ArticleFragment</span><span class="o">.</span><span class="na">ARG_POSITION</span><span class="o">,</span> <span class="n">position</span><span class="o">);</span>
</span><span class="line">            <span class="n">newFragment</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class="line">            <span class="n">FragmentTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">getSupportFragmentManager</span><span class="o">().</span><span class="na">beginTransaction</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//可定制Fragment的退出和进入动画 , 设置在replace or add之前</span>
</span><span class="line">            <span class="n">transaction</span><span class="o">.</span><span class="na">setCustomAnimations</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fade_in</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fade_out</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fade_in</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fade_out</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 替换R.id.fragment_container容器布局中的View</span>
</span><span class="line">            <span class="n">transaction</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fragment_container</span><span class="o">,</span> <span class="n">newFragment</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 添加事物回退栈,让系统管理,当用户点击返回按钮时,销毁当前加载到容器布局中的ArticleFragment</span>
</span><span class="line">            <span class="n">transaction</span><span class="o">.</span><span class="na">addToBackStack</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 提交事物...不然你永远看不到ArticleFragment的出现 ^_^</span>
</span><span class="line">            <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * EventBus事件回掉</span>
</span><span class="line"><span class="cm">     * @param event</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEvent</span><span class="o">(</span><span class="n">ListClickEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">    	<span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;onEvent position:&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">getPosition</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    	<span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class="line">    	<span class="c1">//在需要接收事件通知的类添加到EventBus</span>
</span><span class="line">        <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">        <span class="c1">//注册Receiver</span>
</span><span class="line">        <span class="n">initBroadcastListener</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">    	<span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class="line">    	<span class="c1">//取消事件监听</span>
</span><span class="line">    	<span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">    	<span class="n">mBroadcastManager</span><span class="o">.</span><span class="na">unregisterReceiver</span><span class="o">(</span><span class="n">mItemViewListClickReceiver</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>HeadlinesFragment.java</code> ListView菜单布局</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeadlinesFragment</span> <span class="kd">extends</span> <span class="n">ListFragment</span> <span class="o">{</span>
</span><span class="line">    <span class="n">OnHeadlineSelectedListener</span> <span class="n">mCallback</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 通讯接口, 加载该Fragment的容器Activity必须实现此接口可以接收ListView的点击消息</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnHeadlineSelectedListener</span> <span class="o">{</span>
</span><span class="line">        <span class="cm">/** 当HeadlinesFragment中的ListView点击的时候触发 */</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onArticleSelected</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">HONEYCOMB</span> <span class="o">?</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_activated_1</span> <span class="o">:</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_1</span><span class="o">;</span>
</span><span class="line">        <span class="n">setListAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="n">layout</span><span class="o">,</span> <span class="n">Ipsum</span><span class="o">.</span><span class="na">Headlines</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">getFragmentManager</span><span class="o">().</span><span class="na">findFragmentById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">article_fragment</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">getListView</span><span class="o">().</span><span class="na">setChoiceMode</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">CHOICE_MODE_SINGLE</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAttach</span><span class="o">(</span><span class="n">Activity</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onAttach</span><span class="o">(</span><span class="n">activity</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 保证容器Activity实现了回调接口 否则抛出异常警告</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mCallback</span> <span class="o">=</span> <span class="o">(</span><span class="n">OnHeadlineSelectedListener</span><span class="o">)</span> <span class="n">activity</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassCastException</span><span class="o">(</span><span class="n">activity</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>  <span class="o">+</span> <span class="s">&quot; must implement OnHeadlineSelectedListener&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onListItemClick</span><span class="o">(</span><span class="n">ListView</span> <span class="n">l</span><span class="o">,</span> <span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">//1.通讯方式1  接口通知Activity</span>
</span><span class="line">        <span class="n">mCallback</span><span class="o">.</span><span class="na">onArticleSelected</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//2.通讯方式2  发送广播</span>
</span><span class="line">        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">ACTION_ITEMVIEW_LISTCLICK</span><span class="o">);</span>
</span><span class="line">        <span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;position&quot;</span><span class="o">,</span> <span class="n">position</span><span class="o">);</span>
</span><span class="line">        <span class="n">LocalBroadcastManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">getActivity</span><span class="o">()).</span><span class="na">sendBroadcast</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//3.通讯方式3  发送事件到消息中心,由消息中心负责分发事件</span>
</span><span class="line">        <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">ListClickEvent</span><span class="o">(</span><span class="n">position</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 大屏幕pad分辨率使用两个panel的时候设置</span>
</span><span class="line">        <span class="n">getListView</span><span class="o">().</span><span class="na">setItemChecked</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>ArticleFragment.java</code> 详情页布局。。就一个TextView啦。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticleFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
</span><span class="line">	
</span><span class="line">    <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">ARG_POSITION</span> <span class="o">=</span> <span class="s">&quot;position&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">mCurrentPosition</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">View</span> <span class="nf">onCreateView</span><span class="o">(</span><span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span>
</span><span class="line">        <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    	<span class="c1">//回复在onSaveInstanceState中保存的是状态数据</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">savedInstanceState</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mCurrentPosition</span> <span class="o">=</span> <span class="n">savedInstanceState</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">ARG_POSITION</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">article_view</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getArguments</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">args</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">updateArticleView</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">ARG_POSITION</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">mCurrentPosition</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">updateArticleView</span><span class="o">(</span><span class="n">mCurrentPosition</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">    	<span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class="line">    	<span class="n">EventBus</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateArticleView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">TextView</span> <span class="n">article</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">getActivity</span><span class="o">().</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">article</span><span class="o">);</span>
</span><span class="line">        <span class="n">article</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Ipsum</span><span class="o">.</span><span class="na">Articles</span><span class="o">[</span><span class="n">position</span><span class="o">]);</span>
</span><span class="line">        <span class="n">mCurrentPosition</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSaveInstanceState</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">outState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onSaveInstanceState</span><span class="o">(</span><span class="n">outState</span><span class="o">);</span>
</span><span class="line">        <span class="n">outState</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">ARG_POSITION</span><span class="o">,</span> <span class="n">mCurrentPosition</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEvent</span><span class="o">(</span><span class="n">ListClickEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">    	<span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;ArticleFragment&quot;</span><span class="o">,</span> <span class="s">&quot;onEvent&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">getPosition</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录一段工具代码，很久以前写的加密解密字符串的方法]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/04/30/java-security-encrypt-decrypt/"/>
    <updated>2013-04-30T16:57:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/04/30/java-security-encrypt-decrypt</id>
    <content type="html"><![CDATA[
<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** </span>
</span><span class="line"><span class="cm">     * 字符串加密 </span>
</span><span class="line"><span class="cm">     * @param passWord 加密密码 </span>
</span><span class="line"><span class="cm">     * @return </span>
</span><span class="line"><span class="cm">     * @throws Exception </span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encryptPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">passWord</span><span class="o">)</span><span class="kd">throws</span> <span class="n">Exception</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line"><span class="c1">//        KeyGenerator keyGenerator = KeyGenerator.getInstance(&quot;PBEWithMD5AndDES&quot;);  </span>
</span><span class="line">        <span class="n">SecretKeyFactory</span> <span class="n">keyFactory</span> <span class="o">=</span> <span class="n">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;PBEWithMD5AndDES&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">KeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PBEKeySpec</span><span class="o">(</span><span class="s">&quot;123123123&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
</span><span class="line">        <span class="n">SecretKey</span> <span class="n">secretKey</span> <span class="o">=</span> <span class="n">keyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">PBEParameterSpec</span> <span class="n">parameterSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PBEParameterSpec</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">},</span><span class="mi">1000</span><span class="o">);</span>
</span><span class="line">        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;PBEWithMD5AndDES&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">,</span> <span class="n">parameterSpec</span><span class="o">);</span>
</span><span class="line">        <span class="kt">byte</span> <span class="n">passEn</span><span class="o">[]</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">passWord</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; haha 1&quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">passEn</span><span class="o">,</span><span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">bytesToHexString</span><span class="o">(</span><span class="n">passEn</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="cm">/** </span>
</span><span class="line"><span class="cm">     * 字符串解密 </span>
</span><span class="line"><span class="cm">     * @param passWordEn 加密后的密码 </span>
</span><span class="line"><span class="cm">     * @return </span>
</span><span class="line"><span class="cm">     * @throws Exception </span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">decryptPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">passWordEn</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">SecretKeyFactory</span> <span class="n">keyFactory</span> <span class="o">=</span> <span class="n">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;PBEWithMD5AndDES&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">KeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PBEKeySpec</span><span class="o">(</span><span class="s">&quot;123123123&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">        <span class="n">SecretKey</span> <span class="n">secretKey</span> <span class="o">=</span> <span class="n">keyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
</span><span class="line">        <span class="n">PBEParameterSpec</span> <span class="n">parameterSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PBEParameterSpec</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">},</span><span class="mi">1000</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;PBEWithMD5AndDES&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">,</span> <span class="n">parameterSpec</span><span class="o">);</span>
</span><span class="line">        <span class="kt">byte</span><span class="o">[]</span> <span class="n">passDec</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">passWordEn</span><span class="o">));</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">passDec</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">bytesToHexString</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">src</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">StringBuilder</span> <span class="n">stringBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">src</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">src</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">        <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">src</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class="line">        <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span>
</span><span class="line">            <span class="n">String</span> <span class="n">hv</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">hv</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span>
</span><span class="line">            <span class="o">{</span>
</span><span class="line">                <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">hv</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">stringBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">hexStringToBytes</span><span class="o">(</span><span class="n">String</span> <span class="n">hexString</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">hexString</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">hexString</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))</span>
</span><span class="line">        <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">hexString</span> <span class="o">=</span> <span class="n">hexString</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">hexString</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">        <span class="kt">char</span><span class="o">[]</span> <span class="n">hexChars</span> <span class="o">=</span> <span class="n">hexString</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class="line">        <span class="kt">byte</span><span class="o">[]</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class="line">        <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">            <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)(</span><span class="n">charToByte</span><span class="o">(</span><span class="n">hexChars</span><span class="o">[</span><span class="n">pos</span><span class="o">])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="n">charToByte</span><span class="o">(</span><span class="n">hexChars</span><span class="o">[</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">d</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">byte</span> <span class="nf">charToByte</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="s">&quot;0123456789ABCDEF&quot;</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[干干货分享——Android开发中的学习资源大集合（译&&转）]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/04/30/android-good-good-study/"/>
    <updated>2013-04-30T16:22:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/04/30/android-good-good-study</id>
    <content type="html"><![CDATA[<h2 id="section">声明</h2>
<p>** 这是一篇译文 **先是在google+上看见老外分享的，然后又看见有人翻译并且之微博分享了，真的是很好的东西，当初我学Android的时候怎么没人给咱指条明路呢； </p>

<p>** 原文在这里 ** : <a href="https://plus.google.com/112950854346918395328/posts/Qex6Ae6zhZW">Click Me</a><br />
** 翻译de孩子 ** : <a href="http://weibo.com/206267869">新浪微博</a></p>

<h2 id="section-1">译文</h2>

<p>老婆大人最近想学Android开发，向我寻求帮助。所以我觉得为了避免老婆处罚并且让她在Android应用样式风格和界面一致性方面从一开始就在正确的方向上、确保让她更清楚认识到参考Google提供的UI设计规范是如此重要，我最好能收集一些学习资源。</p>

<p>下面是我找到的非常好的资源，也希望能帮助到大家：</p>

<h3 id="java">先说最重要的，学习Java语言</h3>
<p>如果你不知道Java编程语言或者说你是从其他语言转过来的，需要熟悉下Java的话，下面这些是很好的让你开始了解Java的学习资源。</p>

<ul>
  <li>Java 教程 (内有大量教程)
<a href="http://www.tutorialspoint.com/java/index.htm">http://www.tutorialspoint.com/java/index.htm</a></li>
</ul>

<!-- more -->

<ul>
  <li>
    <p>开始学Java - “Java初学者入门”
<a href="http://www.javacoffeebreak.com/tutorials/gettingstarted/">http://www.javacoffeebreak.com/tutorials/gettingstarted/</a></p>
  </li>
  <li>
    <p>Java语言编程介绍 - Lars Vogel
<a href="http://www.vogella.com/articles/JavaIntroduction/article.html">http://www.vogella.com/articles/JavaIntroduction/article.html</a></p>
  </li>
  <li>
    <p>你用Java编程 (麻省理工学院)
<a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/index.htm">点我跳转吧，连接太长..放出来不好看</a></p>
  </li>
  <li>
    <p>视频 -学习Java: 第一部分: 基础介绍
<a href="http://www.youtube.com/watch?v=3MZIkY55fS0">http://www.youtube.com/watch?v=3MZIkY55fS0</a></p>
  </li>
  <li>
    <p>免费Java在线互动教程（译者注：提供了在线编辑器）
<a href="http://www.learnjavaonline.org/">http://www.learnjavaonline.org/</a></p>
  </li>
  <li>
    <p>Java初学者教程
<a href="http://www.javabeginner.com/">http://www.javabeginner.com/</a></p>
  </li>
  <li>
    <p>加的一行建议
其实我也英文不行，英文不行就看** 毕向东 ** 和 ** 马士兵 ** 的Java基础教程吧孩子<br />
如果你要问我教程到哪里下载，对不起，这个问题应该是我问你^_^</p>
  </li>
</ul>

<h2 id="section-2">进阶吧孩子</h2>

<p>当你** 学好了Java **，你已经准备好正式开始学习Android开发了</p>

<ul>
  <li>每一个Android开发者都应该知道的资源
<a href="http://www.bongizmo.com/blog/android-resources-each-developer-should-know/">http://www.bongizmo.com/blog/android-resources-each-developer-should-know/</a></li>
</ul>

<p>注: 即使你不打算看下面的，不过上面这个一定要看（译者注：上面这个真的很干货，一定要看）</p>

<ul>
  <li>
    <p>开始Android开发 - 作者 Ray Wenderlich
<a href="http://www.raywenderlich.com/5527/getting-started-with-android-development">http://www.raywenderlich.com/5527/getting-started-with-android-development</a></p>
  </li>
  <li>
    <p>始Android开发 - 作者 Chris Lacy
<a href="https://plus.google.com/104649936579980037256/posts/UQD4e1jgLS1">https://plus.google.com/104649936579980037256/posts/UQD4e1jgLS1</a></p>
  </li>
  <li>
    <p>upport Library (用于支持旧版本Android设备)
<a href="http://developer.android.com/tools/extras/support-library.html">http://developer.android.com/tools/extras/support-library.html</a></p>
  </li>
  <li>
    <p>下面是视频教程
Android 训练营视频教程
<a href="http://www.youtube.com/watch?v=Mf7z_mrce00&amp;list=SPE953C0B85B50AB62">Tutorial: Android Application Development - A 9,000 foot overview</a></p>
  </li>
</ul>

<h2 id="section-3">下面是常用的第三方库</h2>

<ul>
  <li>
    <p>Android Asset Studio
 <a href="http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html">http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html</a></p>
  </li>
  <li>
    <p>ActionBarSherlock
<a href="http://actionbarsherlock.com/">http://actionbarsherlock.com/</a></p>
  </li>
  <li>
    <p>AndroidSideMenu
<a href="https://github.com/dmitry-zaitsev/AndroidSideMenu">https://github.com/dmitry-zaitsev/AndroidSideMenu</a></p>
  </li>
  <li>
    <p>SlidingMenu
 <a href="https://github.com/jfeinstein10/SlidingMenu">https://github.com/jfeinstein10/SlidingMenu</a></p>
  </li>
  <li>
    <p>ViewPagerIndicator
<a href="http://viewpagerindicator.com/">http://viewpagerindicator.com/</a></p>
  </li>
  <li>
    <p>UnifiedPreference
 <a href="https://github.com/saik0/UnifiedPreference">https://github.com/saik0/UnifiedPreference</a></p>
  </li>
  <li>
    <p>Pull To Refresh Views for Android
<a href="https://github.com/chrisbanes/Android-PullToRefresh">https://github.com/chrisbanes/Android-PullToRefresh</a></p>
  </li>
  <li>
    <p>SwipeListView
 <a href="https://github.com/47deg/android-swipelistview">https://github.com/47deg/android-swipelistview</a></p>
  </li>
</ul>

<h2 id="app-fragment">让你的应用APP轻松支持平板设备-学习使用Fragment</h2>

<ul>
  <li>
    <p>开发中如何使用 Fragments
<a href="http://mobile.tutsplus.com/tutorials/android/android-sdk_fragments/">http://mobile.tutsplus.com/tutorials/android/android-sdk_fragments/</a></p>
  </li>
  <li>
    <p>Android中使用Fragment - 教程
<a href="http://www.vogella.com/articles/AndroidFragments/article.html">http://www.vogella.com/articles/AndroidFragments/article.html</a></p>
  </li>
  <li>
    <p>理解Fragment的生命周期
<a href="http://blog.csdn.net/forever_crying/article/details/8238863">http://blog.csdn.net/forever_crying/article/details/8238863</a></p>
  </li>
</ul>

<h2 id="finally">Finally</h2>
<p>当开发Android应用的时候，理解Java、界面布局和Fragment使用很重要。
不过理解Android UI设计规范并在你自己的APP 设计中保证体验一致性也同等重要，遵循这些规范能让用户体验更好。</p>

<p>希望上面提到的资源对你开始Android开发有所帮助。如果你已经做Android一段时间了，也许你也能在这些资源中发现一些干货让你进一步提升。</p>

<p>** 最后，祝大家开发愉快 :-) ** </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Fragment-调研]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/04/30/android-fragment/"/>
    <updated>2013-04-30T06:45:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/04/30/android-fragment</id>
    <content type="html"><![CDATA[<p>Fragment是google由3.0开始加入SDK的界面解决方案.<br />
后续由谷歌团队维护并发行了support包以支持低版本SDK来使用Fragment</p>

<h3 id="fragment">谁在使用Fragment</h3>
<hr />

<ul>
  <li>网易新闻</li>
  <li>网易云音乐</li>
  <li>百度音乐</li>
  <li>多米</li>
  <li>豌豆荚</li>
  <li>小米app</li>
  <li>Path</li>
  <li>Pocket</li>
  <li>Fuubo</li>
</ul>

<!-- more -->
<p>###Fragment的优点
—————-
 * adding and removing Fragment可以做动画的效果,平滑过度</p>

<ul>
  <li>
    <p>自动化堆栈管理,所以返回键可以删除动态添加的Fragment,最后销毁Activity,无需做过多判断</p>
  </li>
  <li>
    <p>集成ActionBar的标签,可以替代TabHost,ActivityGrounp,与谷歌设计风格紧密结合</p>
  </li>
  <li>
    <p>布局更加模块化.与原Activity中的Layout分块化,VCBase的分块化道理相同</p>
  </li>
  <li>
    <p>灵活准确的生命周期去管理当前View的状态记录以及横竖屏处理</p>
  </li>
  <li>
    <p>Fragment管理的View,可同时使用在Phone和Pad上,一份代码两份机器,可重用性高</p>
  </li>
  <li>
    <p>Is a View, More than View</p>
  </li>
  <li>
    <p>可以从startActivityForResult中接收到返回结果,但是View不能</p>
  </li>
  <li>
    <p>唯一Id标识,可以从FragmentManager中获取id对应的Fragment</p>
  </li>
</ul>

<h3 id="fragment-1">Fragment的缺点</h3>
<hr />
<p>与其说是Fragment的缺点,不如说是每个应用程序模块之间的通讯都面临地耦合问题</p>

<ul>
  <li>Fragment之间的通讯依赖Activity使用接口管理并通知</li>
</ul>

<h3 id="section">如何解决模块之间的通讯的耦合问题</h3>
<hr />

<h4 id="activityview">1.使用接口,让Activity扮演管理角色,负责分发消息到该窗口的子View</h4>

<p>该方案的缺点</p>

<ul>
  <li>不方便使用单元测试</li>
  <li>随着应用功能的增加,需要监听的事件越来越多,导致越来越多的接口声明以及绑定</li>
</ul>

<h4 id="localbroadcastmanager--intentfilterintent">2.使用LocalBroadcastManager + IntentFilter解决不同组件通讯,Intent负责搭载数据</h4>
<p>该方案的缺点</p>

<ul>
  <li>不方便单元测试,需要实例化Intent,填装Intent的数据,实现Broadcast receivers以及再次提取Intent中的数据</li>
  <li>receiver中不可做耗时操作,因为reciver是限时进程,10秒后会被系统kill掉,如果需要做耗时操作,需另外启Service来完成</li>
</ul>

<h4 id="eventbus">3.EventBus</h4>
<ul>
  <li>消息订阅者:Activity or Fragment等订阅类注册自己到EventBus中  </li>
  <li>消息发布者:只负责发布消息以及消息包装数据到EventBus</li>
  <li>回调基于命名约定以及消息包装对象</li>
  <li>方便的单元测试</li>
</ul>
]]></content>
  </entry>
  
</feed>
