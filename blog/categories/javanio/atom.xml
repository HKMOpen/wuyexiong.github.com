<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaNIO | Wuyexiong de Blog]]></title>
  <link href="http://wuyexiong.github.io/blog/categories/javanio/atom.xml" rel="self"/>
  <link href="http://wuyexiong.github.io/"/>
  <updated>2014-08-05T21:27:07+08:00</updated>
  <id>http://wuyexiong.github.io/</id>
  <author>
    <name><![CDATA[Wuyexiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（五） 通道之间的数据传输]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/17/java-nio-channel-to-channel/"/>
    <updated>2013-06-17T01:58:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/17/java-nio-channel-to-channel</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/java-nio-channel-to-channel/">http://ifeve.com/java-nio-channel-to-channel/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html">http://tutorials.jenkov.com/java-nio/scatter-gather.html</a>  </p>

<p><code>
作者:Jakob Jenkov   译者:郭蕾     校对:周泰
</code></p>

<p>在Java NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel（译者注：channel中文常译作通道）传输到另外一个channel。</p>

<h2 id="transferfrom">transferFrom()</h2>
<p>FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中（译者注：这个方法在JDK文档中的解释为将字节从给定的可读取字节通道传输到此通道的文件中）。下面是一个简单的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RandomAccessFile</span> <span class="n">fromFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">fromFile</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">FileChannel</span>      <span class="n">fromChannel</span> <span class="o">=</span> <span class="n">fromFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RandomAccessFile</span> <span class="n">toFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">toFile</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">FileChannel</span>      <span class="n">toChannel</span> <span class="o">=</span> <span class="n">toFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">long</span> <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">fromChannel</span><span class="o">.</span><span class="na">size</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">toChannel</span><span class="o">.</span><span class="na">transferFrom</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">fromChannel</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->

<p>方法的输入参数position表示从position处开始向目标文件写入数据，count表示最多传输的字节数。
如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小于请求的字节数。</p>

<p>此外要注意，在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。
因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。</p>

<h2 id="transferto">transferTo()</h2>

<p>transferTo()方法将数据从FileChannel传输到其他的channel中。下面是一个简单的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RandomAccessFile</span> <span class="n">fromFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">fromFile</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">FileChannel</span>      <span class="n">fromChannel</span> <span class="o">=</span> <span class="n">fromFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RandomAccessFile</span> <span class="n">toFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">toFile</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">FileChannel</span>      <span class="n">toChannel</span> <span class="o">=</span> <span class="n">toFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">long</span> <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">fromChannel</span><span class="o">.</span><span class="na">size</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fromChannel</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">toChannel</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>是不是发现这个例子和前面那个例子特别相似？除了调用方法的FileChannel对象不一样外，其他的都一样。</p>

<p>上面所说的关于SocketChannel的问题在transferTo()方法中同样存在。SocketChannel会一直传输数据直到目标buffer被填满。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（四） Scatter/Gather]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/17/java-nio-scattergather/"/>
    <updated>2013-06-17T01:31:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/17/java-nio-scattergather</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/java-nio-scattergather/">http://ifeve.com/java-nio-scattergather/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/scatter-gather.html">http://tutorials.jenkov.com/java-nio/scatter-gather.html</a>  </p>

<p><code>
作者：Jakob Jenkov   译者：郭蕾  
</code>
Java NIO开始支持scatter/gather，scatter/gather用于描述从Channel（译者注：Channel在中文经常翻译为通道）中读取或者写入到Channel的操作。</p>

<p>分散（scatter）从Channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据“分散（scatter）”到多个Buffer中。</p>

<p>聚集（gather）写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel 将多个Buffer中的数据“聚集（gather）”后发送到Channel。</p>

<h2 id="scattering-reads">Scattering Reads</h2>

<p>Scattering Reads是指数据从一个channel读取到多个buffer中。</p>

<p>如下图描述  <!-- more -->
<img src="/images/java-nio-imgs/java-nio-scatter.png" alt="Java NIO: Scattering Read" /></p>

<p>代码示例如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ByteBuffer</span> <span class="n">header</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">128</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ByteBuffer</span> <span class="n">body</span>   <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ByteBuffer</span><span class="o">[]</span> <span class="n">bufferArray</span> <span class="o">=</span> <span class="o">{</span> <span class="n">header</span><span class="o">,</span> <span class="n">body</span> <span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bufferArray</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。</p>

<p>Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如 128byte），Scattering Reads才能正常工作。</p>

<h2 id="gathering-writes">Gathering Writes</h2>

<p>Gathering Writes是指数据从多个buffer写入到同一个channel。<br />
如下图描述： <br />
<img src="/images/java-nio-imgs/java-nio-gather.png" alt="Java NIO: Gathering Write" /></p>

<p>代码示例如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ByteBuffer</span> <span class="n">header</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">128</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ByteBuffer</span> <span class="n">body</span>   <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//write data into buffers&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ByteBuffer</span><span class="o">[]</span> <span class="n">bufferArray</span> <span class="o">=</span> <span class="o">{</span> <span class="n">header</span><span class="o">,</span> <span class="n">body</span> <span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">channel</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bufferArray</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>buffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。</p>

<p>因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（三） Buffer]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-buffer/"/>
    <updated>2013-06-10T23:31:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-buffer</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/buffers/">http://ifeve.com/buffers/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/buffers.html">http://tutorials.jenkov.com/java-nio/buffers.html</a>  </p>

<p><code>
作者：Jakob Jenkov     译者：airu     校对：丁一
</code></p>

<p>Java NIO中的Buffer用于和NIO通道进行交互。如你所知，数据是从通道读入缓冲区，从缓冲区写入到通道中的。</p>

<p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>

<p><strong>下面是NIO Buffer相关的话题列表：</strong></p>

<ol>
  <li>Buffer的基本用法</li>
  <li>Buffer的capacity,position和limit</li>
  <li>Buffer的类型 </li>
  <li>Buffer的分配 </li>
  <li>向Buffer中写数据</li>
  <li>flip()方法</li>
  <li>从Buffer中读取数据</li>
  <li>clear()与compact()方法</li>
  <li>mark()与reset()方法</li>
  <li>equals()与compareTo()方法</li>
</ol>

<!-- more -->

<h2 id="buffer">Buffer的基本用法</h2>

<p>使用Buffer读写数据一般遵循以下四个步骤：</p>

<ol>
  <li>写入数据到Buffer</li>
  <li>调用flip()方法</li>
  <li>从Buffer中读取数据</li>
  <li>调用clear()方法或者compact()方法</li>
</ol>

<p>当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式。在读模式下，可以读取之前写入到buffer的所有数据。</p>

<p>一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用clear()或compact()方法。clear()方法会清空整个缓冲区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p>

<p>下面是一个使用Buffer的例子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RandomAccessFile</span> <span class="n">aFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">data</span><span class="o">/</span><span class="n">nio</span><span class="o">-</span><span class="n">data</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">FileChannel</span> <span class="n">inChannel</span> <span class="o">=</span> <span class="n">aFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//create buffer with capacity of 48 bytes</span>
</span><span class='line'><span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span><span class="c1">//read into buffer.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span><span class="o">(</span><span class="n">bytesRead</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">“</span><span class="n">Read</span> <span class="err">“</span> <span class="o">+</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>	<span class="n">buf</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>     <span class="c1">//make buffer ready for read</span>
</span><span class='line'>	<span class="k">while</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">hasRemaining</span><span class="o">())</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>     <span class="c1">// read 1 byte at a time</span>
</span><span class='line'>	<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">buf</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>     <span class="c1">//make buffer ready for writing</span>
</span><span class='line'><span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span> <span class="o">}</span> <span class="n">aFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="buffercapacitypositionlimit">Buffer的capacity,position和limit</h2>
<p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p>

<p>为了理解Buffer的工作原理，需要熟悉它的三个属性：</p>

<ul>
  <li>capacity</li>
  <li>position</li>
  <li>limit</li>
</ul>

<p>position和limit的含义取决于Buffer处在读模式还是写模式。不管Buffer处在什么模式，capacity的含义总是一样的。</p>

<p>这里有一个关于capacity，position和limit在读写模式中的说明，详细的解释在插图后面。</p>

<p><img src="/images/java-nio-imgs/buffers-modes.png" alt="" /></p>

<h2 id="capacity">capacity</h2>

<p>作为一个内存块，Buffer有一个固定的大小值，也叫“capacity”.你只能往里写capacity个byte、long，char等类型。一旦Buffer满了，需要将其清空（通过读数据或者清除数据）才能继续写数据往里写数据。</p>

<h2 id="position">position</h2>

<p>当你写数据到Buffer中时，position表示当前的位置。初始的position值为0.当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity - 1.</p>

<p>当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。</p>

<h2 id="limit">limit</h2>

<p>在写模式下，Buffer的limit表示你最多能往Buffer里写多少数据。 写模式下，limit等于Buffer的capacity。</p>

<p>当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）</p>

<h2 id="buffer-1">Buffer的类型</h2>

<p>Java NIO 有以下Buffer类型</p>

<ul>
  <li>ByteBuffer</li>
  <li>MappedByteBuffer</li>
  <li>CharBuffer</li>
  <li>DoubleBuffer</li>
  <li>FloatBuffer</li>
  <li>IntBuffer</li>
  <li>LongBuffer</li>
  <li>ShortBuffer</li>
</ul>

<p>如你所见，这些Buffer类型代表了不同的数据类型。换句话说，就是可以通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。</p>

<p>MappedByteBuffer 有些特别，在涉及它的专门章节中再讲。</p>

<h2 id="buffer-2">Buffer的分配</h2>

<p>要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。下面是一个分配48字节capacity的ByteBuffer的例子。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是分配一个可存储1024个字符的CharBuffer：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CharBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">CharBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="buffer-3">向Buffer中写数据</h2>

<p>写数据到Buffer有两种方式:  </p>

<ul>
  <li>从Channel写到Buffer。</li>
  <li>通过Buffer的put()方法写到Buffer里。</li>
</ul>

<p>从Channel写到Buffer的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span> <span class="c1">//read into buffer.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过put方法写Buffer的例子:  </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buf</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">127</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>put方法有很多版本，允许你以不同的方式把数据写入到Buffer中。例如， 写到一个指定的位置，或者把一个字节数组写入到Buffer。 更多Buffer实现的细节参考JavaDoc。</p>

<h2 id="flip">flip()方法</h2>

<p>flip方法将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。</p>

<p>换句话说，position现在用于标记读的位置，limit表示之前写进了多少个byte、char等 —— 现在能读取多少个byte、char等。</p>

<h2 id="buffer-4">从Buffer中读取数据</h2>

<p>从Buffer中读取数据有两种方式：</p>

<ul>
  <li>从Buffer读取数据到Channel。</li>
  <li>使用get()方法从Buffer中读取数据。</li>
</ul>

<p>从Buffer读取数据到Channel的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//read from buffer into channel.</span>
</span><span class='line'><span class="kt">int</span> <span class="n">bytesWritten</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用get()方法从Buffer中读取数据的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span> <span class="n">aByte</span> <span class="o">=</span> <span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>get方法有很多版本，允许你以不同的方式从Buffer中读取数据。例如，从指定position读取，或者从Buffer中读取数据到字节数组。更多Buffer实现的细节参考JavaDoc。</p>

<h2 id="rewind">rewind()方法</h2>

<p>Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。</p>

<h2 id="clearcompact">clear()与compact()方法</h2>

<p>一旦读完Buffer中的数据，需要让Buffer准备好再次被写入。可以通过clear()或compact()方法来完成。</p>

<p>如果调用的是clear()方法，position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。</p>

<p>如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。</p>

<p>如果Buffer中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据，那么使用compact()方法。</p>

<p>compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。</p>

<h2 id="markreset">mark()与reset()方法</h2>

<p>通过调用Buffer.mark()方法，可以标记Buffer中的一个特定position。之后可以通过调用Buffer.reset()方法恢复到这个position。例如:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buffer</span><span class="o">.</span><span class="na">mark</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//call buffer.get() a couple of times, e.g. during parsing.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">buffer</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>  <span class="c1">//set position back to mark.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="equalscompareto">equals()与compareTo()方法</h2>

<p>可以使用equals()和compareTo()方法两个Buffer。</p>

<h3 id="equals">equals()</h3>

<p>当满足下列条件时，表示两个Buffer相等：</p>

<ol>
  <li>有相同的类型（byte、char、int等）。</li>
  <li>Buffer中剩余的byte、char等的个数相等。</li>
  <li>Buffer中所有剩余的byte、char等都相同。</li>
</ol>

<p>如你所见，equals只是比较Buffer的一部分，不是每一个在它里面的元素都比较。实际上，它只比较Buffer中的剩余元素。</p>

<h3 id="compareto">compareTo()方法</h3>

<p>compareTo()方法比较两个Buffer的剩余元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：</p>

<ol>
  <li>第一个不相等的元素小于另一个Buffer中对应的元素 。</li>
  <li>所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（二） Channel]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-channels/"/>
    <updated>2013-06-10T13:08:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-channels</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/channels/">http://ifeve.com/channels/</a><br />
英文原文地址:<a href="http://tutorials.jenkov.com/java-nio/channels.html">http://tutorials.jenkov.com/java-nio/channels.html</a>  </p>

<pre><code> 作者：Jakob Jenkov     译者：airu     校对：丁一
</code></pre>

<p>Java NIO的通道类似流，但又有些不同：</p>

<p>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。
通道可以异步地读写。
通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。
正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p>

<p><img src="/images/java-nio-imgs/overview-channels-buffers.png" alt="" /></p>

<!-- more -->

<p><strong>Channel的实现</strong></p>

<p>这些是Java NIO中最重要的通道的实现：</p>

<ul>
  <li>FileChannel</li>
  <li>DatagramChannel</li>
  <li>SocketChannel</li>
  <li>ServerSocketChannel</li>
</ul>

<p>FileChannel 从文件中读写数据。</p>

<p>DatagramChannel 能通过UDP读写网络中的数据。</p>

<p>SocketChannel 能通过TCP读写网络中的数据。</p>

<p>ServerSocketChannel可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</p>

<p><strong>基本的 Channel 示例</strong></p>

<p>下面是一个使用FileChannel读取数据到Buffer中的示例：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="n">RandomAccessFile</span> <span class="n">aFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomAccessFile</span><span class="o">(</span><span class="err">“</span><span class="n">data</span><span class="o">/</span><span class="n">nio</span><span class="o">-</span><span class="n">data</span><span class="o">.</span><span class="na">txt</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">rw</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>		<span class="n">FileChannel</span> <span class="n">inChannel</span> <span class="o">=</span> <span class="n">aFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class='line'>		<span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">48</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>	<span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>	<span class="k">while</span><span class="o">(</span><span class="n">bytesRead</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Read &quot;</span> <span class="o">+</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>		<span class="n">buf</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class='line'>		<span class="k">while</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">hasRemaining</span><span class="o">())</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">buf</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>		<span class="n">buf</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>		<span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	<span class="n">aFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer,接着再从Buffer中读取数据。下一节会深入讲解Buffer的更多细节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java NIO系列教程（一） Java NIO 概述]]></title>
    <link href="http://wuyexiong.github.io/blog/2013/06/10/java-nio-overview/"/>
    <updated>2013-06-10T02:07:00+08:00</updated>
    <id>http://wuyexiong.github.io/blog/2013/06/10/java-nio-overview</id>
    <content type="html"><![CDATA[<p>本文为转载 感谢并发编程网<br />
译文原文地址:<a href="http://ifeve.com/overview/">http://ifeve.com/overview/</a><br />
英文原文链接:<a href="http://tutorials.jenkov.com/java-nio/overview.html">http://tutorials.jenkov.com/java-nio/overview.html</a></p>

<p>作者：<strong>Jakob Jenkov</strong>     译者：<strong>airu</strong>     校对：<strong>丁一</strong></p>

<p>Java NIO 由以下几个核心部分组成:</p>

<ul>
  <li>Channels</li>
  <li>Buffers</li>
  <li>Selectors</li>
</ul>

<p>虽然Java NIO中除此之外还有很多的类和组件，但在我看来，Channel，Buffer和Selector构成了核心的API。其他组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。因此，在概述中我将集中在这三个组件上。其他组件会在单独的章节中讲到</p>

<!-- more -->

<h2 id="channel--buffer">Channel 和 Buffer</h2>

<p>基本上，所有的 IO 在 NIO 中都从一个Channel 开始。Channel 有点象流。 数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。这里有个图示：<br />
<img src="/images/java-nio-imgs/java-nio-overview-channels-buffers1.png" alt="" /></p>

<p><strong>Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现：</strong></p>

<ul>
  <li>FileChannel</li>
  <li>DatagramChannel</li>
  <li>SocketChannel</li>
  <li>ServerSocketChannel</li>
</ul>

<p>正如你所看到的，这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO。  </p>

<p>与这些类一起的有一些有趣的接口，但为简单起见，我尽量在概述中不提到它们。  </p>

<p>本教程其它章节与它们相关的地方我会进行解释。</p>

<p><strong>以下是Java NIO里关键的Buffer实现：</strong></p>

<ul>
  <li>ByteBuffer</li>
  <li>CharBuffer</li>
  <li>DoubleBuffer</li>
  <li>FloatBuffer</li>
  <li>IntBuffer</li>
  <li>LongBuffer</li>
  <li>ShortBuffer</li>
</ul>

<p>这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。</p>

<p>Java NIO 还有个 Mappedyteuffer，用于表示内存映射文件， 我也不打算在概述中说明。</p>

<h2 id="selector">Selector</h2>

<p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。例如，在一个聊天服务器中。</p>

<p>这是在一个单线程中使用一个Selector处理3个Channel的图示：</p>

<p><img src="/images/java-nio-imgs/java-nio-overview-selectors.png" alt="" /></p>

<p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新连接进来，数据接收等。</p>
]]></content>
  </entry>
  
</feed>
